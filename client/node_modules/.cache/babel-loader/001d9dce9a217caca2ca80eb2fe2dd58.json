{"ast":null,"code":"/*!\n * express-session\n * Copyright(c) 2010 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n'use strict';\n/**\n * Module dependencies.\n * @private\n */\n\nvar Store = require('./store');\n\nvar util = require('util');\n/**\n * Shim setImmediate for node.js < 0.10\n * @private\n */\n\n/* istanbul ignore next */\n\n\nvar defer = typeof setImmediate === 'function' ? setImmediate : function (fn) {\n  process.nextTick(fn.bind.apply(fn, arguments));\n};\n/**\n * Module exports.\n */\n\nmodule.exports = MemoryStore;\n/**\n * A session store in memory.\n * @public\n */\n\nfunction MemoryStore() {\n  Store.call(this);\n  this.sessions = Object.create(null);\n}\n/**\n * Inherit from Store.\n */\n\n\nutil.inherits(MemoryStore, Store);\n/**\n * Get all active sessions.\n *\n * @param {function} callback\n * @public\n */\n\nMemoryStore.prototype.all = function all(callback) {\n  var sessionIds = Object.keys(this.sessions);\n  var sessions = Object.create(null);\n\n  for (var i = 0; i < sessionIds.length; i++) {\n    var sessionId = sessionIds[i];\n    var session = getSession.call(this, sessionId);\n\n    if (session) {\n      sessions[sessionId] = session;\n    }\n  }\n\n  callback && defer(callback, null, sessions);\n};\n/**\n * Clear all sessions.\n *\n * @param {function} callback\n * @public\n */\n\n\nMemoryStore.prototype.clear = function clear(callback) {\n  this.sessions = Object.create(null);\n  callback && defer(callback);\n};\n/**\n * Destroy the session associated with the given session ID.\n *\n * @param {string} sessionId\n * @public\n */\n\n\nMemoryStore.prototype.destroy = function destroy(sessionId, callback) {\n  delete this.sessions[sessionId];\n  callback && defer(callback);\n};\n/**\n * Fetch session by the given session ID.\n *\n * @param {string} sessionId\n * @param {function} callback\n * @public\n */\n\n\nMemoryStore.prototype.get = function get(sessionId, callback) {\n  defer(callback, null, getSession.call(this, sessionId));\n};\n/**\n * Commit the given session associated with the given sessionId to the store.\n *\n * @param {string} sessionId\n * @param {object} session\n * @param {function} callback\n * @public\n */\n\n\nMemoryStore.prototype.set = function set(sessionId, session, callback) {\n  this.sessions[sessionId] = JSON.stringify(session);\n  callback && defer(callback);\n};\n/**\n * Get number of active sessions.\n *\n * @param {function} callback\n * @public\n */\n\n\nMemoryStore.prototype.length = function length(callback) {\n  this.all(function (err, sessions) {\n    if (err) return callback(err);\n    callback(null, Object.keys(sessions).length);\n  });\n};\n/**\n * Touch the given session object associated with the given session ID.\n *\n * @param {string} sessionId\n * @param {object} session\n * @param {function} callback\n * @public\n */\n\n\nMemoryStore.prototype.touch = function touch(sessionId, session, callback) {\n  var currentSession = getSession.call(this, sessionId);\n\n  if (currentSession) {\n    // update expiration\n    currentSession.cookie = session.cookie;\n    this.sessions[sessionId] = JSON.stringify(currentSession);\n  }\n\n  callback && defer(callback);\n};\n/**\n * Get session from the store.\n * @private\n */\n\n\nfunction getSession(sessionId) {\n  var sess = this.sessions[sessionId];\n\n  if (!sess) {\n    return;\n  } // parse\n\n\n  sess = JSON.parse(sess);\n\n  if (sess.cookie) {\n    var expires = typeof sess.cookie.expires === 'string' ? new Date(sess.cookie.expires) : sess.cookie.expires; // destroy expired session\n\n    if (expires && expires <= Date.now()) {\n      delete this.sessions[sessionId];\n      return;\n    }\n  }\n\n  return sess;\n}","map":null,"metadata":{},"sourceType":"script"}