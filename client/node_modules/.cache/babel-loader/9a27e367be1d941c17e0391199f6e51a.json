{"ast":null,"code":"\"use strict\";\n\nvar copy = require('../connection/utils').copy,\n    retrieveBSON = require('../connection/utils').retrieveBSON,\n    KillCursor = require('../connection/commands').KillCursor,\n    GetMore = require('../connection/commands').GetMore,\n    Query = require('../connection/commands').Query,\n    f = require('util').format,\n    MongoError = require('../error'),\n    getReadPreference = require('./shared').getReadPreference;\n\nvar BSON = retrieveBSON(),\n    Long = BSON.Long;\n\nvar WireProtocol = function () {}; //\n// Execute a write operation\n\n\nvar executeWrite = function (pool, bson, type, opsField, ns, ops, options, callback) {\n  if (ops.length == 0) throw new MongoError(\"insert must contain at least one document\");\n\n  if (typeof options == 'function') {\n    callback = options;\n    options = {};\n    options = options || {};\n  } // Split the ns up to get db and collection\n\n\n  var p = ns.split(\".\");\n  var d = p.shift(); // Options\n\n  var ordered = typeof options.ordered == 'boolean' ? options.ordered : true;\n  var writeConcern = options.writeConcern; // return skeleton\n\n  var writeCommand = {};\n  writeCommand[type] = p.join('.');\n  writeCommand[opsField] = ops;\n  writeCommand.ordered = ordered; // Did we specify a write concern\n\n  if (writeConcern && Object.keys(writeConcern).length > 0) {\n    writeCommand.writeConcern = writeConcern;\n  } // Do we have bypassDocumentValidation set, then enable it on the write command\n\n\n  if (typeof options.bypassDocumentValidation == 'boolean') {\n    writeCommand.bypassDocumentValidation = options.bypassDocumentValidation;\n  } // Options object\n\n\n  var opts = {\n    command: true\n  };\n  var queryOptions = {\n    checkKeys: false,\n    numberToSkip: 0,\n    numberToReturn: 1\n  };\n  if (type == 'insert') queryOptions.checkKeys = true;\n  if (typeof options.checkKeys == 'boolean') queryOptions.checkKeys = options.checkKeys; // Ensure we support serialization of functions\n\n  if (options.serializeFunctions) queryOptions.serializeFunctions = options.serializeFunctions; // Do not serialize the undefined fields\n\n  if (options.ignoreUndefined) queryOptions.ignoreUndefined = options.ignoreUndefined;\n\n  try {\n    // Create write command\n    var cmd = new Query(bson, f(\"%s.$cmd\", d), writeCommand, queryOptions); // Execute command\n\n    pool.write(cmd, opts, callback);\n  } catch (err) {\n    callback(err);\n  }\n}; //\n// Needs to support legacy mass insert as well as ordered/unordered legacy\n// emulation\n//\n\n\nWireProtocol.prototype.insert = function (pool, ismaster, ns, bson, ops, options, callback) {\n  executeWrite(pool, bson, 'insert', 'documents', ns, ops, options, callback);\n};\n\nWireProtocol.prototype.update = function (pool, ismaster, ns, bson, ops, options, callback) {\n  executeWrite(pool, bson, 'update', 'updates', ns, ops, options, callback);\n};\n\nWireProtocol.prototype.remove = function (pool, ismaster, ns, bson, ops, options, callback) {\n  executeWrite(pool, bson, 'delete', 'deletes', ns, ops, options, callback);\n};\n\nWireProtocol.prototype.killCursor = function (bson, ns, cursorId, pool, callback) {\n  // Create a kill cursor command\n  var killCursor = new KillCursor(bson, [cursorId]); // Execute the kill cursor command\n\n  if (pool && pool.isConnected()) {\n    pool.write(killCursor, {\n      immediateRelease: true,\n      noResponse: true\n    });\n  } // Callback\n\n\n  if (typeof callback == 'function') callback(null, null);\n};\n\nWireProtocol.prototype.getMore = function (bson, ns, cursorState, batchSize, raw, connection, options, callback) {\n  // Create getMore command\n  var getMore = new GetMore(bson, ns, cursorState.cursorId, {\n    numberToReturn: batchSize\n  }); // Query callback\n\n  var queryCallback = function (err, result) {\n    if (err) return callback(err); // Get the raw message\n\n    var r = result.message; // If we have a timed out query or a cursor that was killed\n\n    if ((r.responseFlags & 1 << 0) != 0) {\n      return callback(new MongoError(\"cursor does not exist, was killed or timed out\"), null);\n    } // Ensure we have a Long valie cursor id\n\n\n    var cursorId = typeof r.cursorId == 'number' ? Long.fromNumber(r.cursorId) : r.cursorId; // Set all the values\n\n    cursorState.documents = r.documents;\n    cursorState.cursorId = cursorId; // Return\n\n    callback(null, null, r.connection);\n  }; // Contains any query options\n\n\n  var queryOptions = {}; // If we have a raw query decorate the function\n\n  if (raw) {\n    queryOptions.raw = raw;\n  } // Check if we need to promote longs\n\n\n  if (typeof cursorState.promoteLongs == 'boolean') {\n    queryOptions.promoteLongs = cursorState.promoteLongs;\n  }\n\n  if (typeof cursorState.promoteValues == 'boolean') {\n    queryOptions.promoteValues = cursorState.promoteValues;\n  }\n\n  if (typeof cursorState.promoteBuffers == 'boolean') {\n    queryOptions.promoteBuffers = cursorState.promoteBuffers;\n  } // Write out the getMore command\n\n\n  connection.write(getMore, queryOptions, queryCallback);\n};\n\nWireProtocol.prototype.command = function (bson, ns, cmd, cursorState, topology, options) {\n  // Establish type of command\n  if (cmd.find) {\n    return setupClassicFind(bson, ns, cmd, cursorState, topology, options);\n  } else if (cursorState.cursorId != null) {\n    return;\n  } else if (cmd) {\n    return setupCommand(bson, ns, cmd, cursorState, topology, options);\n  } else {\n    throw new MongoError(f(\"command %s does not return a cursor\", JSON.stringify(cmd)));\n  }\n}; //\n// Execute a find command\n\n\nvar setupClassicFind = function (bson, ns, cmd, cursorState, topology, options) {\n  // Ensure we have at least some options\n  options = options || {}; // Get the readPreference\n\n  var readPreference = getReadPreference(cmd, options); // Set the optional batchSize\n\n  cursorState.batchSize = cmd.batchSize || cursorState.batchSize;\n  var numberToReturn = 0; // Unpack the limit and batchSize values\n\n  if (cursorState.limit == 0) {\n    numberToReturn = cursorState.batchSize;\n  } else if (cursorState.limit < 0 || cursorState.limit < cursorState.batchSize || cursorState.limit > 0 && cursorState.batchSize == 0) {\n    numberToReturn = cursorState.limit;\n  } else {\n    numberToReturn = cursorState.batchSize;\n  }\n\n  var numberToSkip = cursorState.skip || 0; // Build actual find command\n\n  var findCmd = {}; // Using special modifier\n\n  var usesSpecialModifier = false; // We have a Mongos topology, check if we need to add a readPreference\n\n  if (topology.type == 'mongos' && readPreference) {\n    findCmd['$readPreference'] = readPreference.toJSON();\n    usesSpecialModifier = true;\n  } // Add special modifiers to the query\n\n\n  if (cmd.sort) findCmd['orderby'] = cmd.sort, usesSpecialModifier = true;\n  if (cmd.hint) findCmd['$hint'] = cmd.hint, usesSpecialModifier = true;\n  if (cmd.snapshot) findCmd['$snapshot'] = cmd.snapshot, usesSpecialModifier = true;\n  if (cmd.returnKey) findCmd['$returnKey'] = cmd.returnKey, usesSpecialModifier = true;\n  if (cmd.maxScan) findCmd['$maxScan'] = cmd.maxScan, usesSpecialModifier = true;\n  if (cmd.min) findCmd['$min'] = cmd.min, usesSpecialModifier = true;\n  if (cmd.max) findCmd['$max'] = cmd.max, usesSpecialModifier = true;\n  if (cmd.showDiskLoc) findCmd['$showDiskLoc'] = cmd.showDiskLoc, usesSpecialModifier = true;\n  if (cmd.comment) findCmd['$comment'] = cmd.comment, usesSpecialModifier = true;\n  if (cmd.maxTimeMS) findCmd['$maxTimeMS'] = cmd.maxTimeMS, usesSpecialModifier = true;\n\n  if (cmd.explain) {\n    // nToReturn must be 0 (match all) or negative (match N and close cursor)\n    // nToReturn > 0 will give explain results equivalent to limit(0)\n    numberToReturn = -Math.abs(cmd.limit || 0);\n    usesSpecialModifier = true;\n    findCmd['$explain'] = true;\n  } // If we have a special modifier\n\n\n  if (usesSpecialModifier) {\n    findCmd['$query'] = cmd.query;\n  } else {\n    findCmd = cmd.query;\n  } // Throw on majority readConcern passed in\n\n\n  if (cmd.readConcern && cmd.readConcern.level != 'local') {\n    throw new MongoError(f('server find command does not support a readConcern level of %s', cmd.readConcern.level));\n  } // Remove readConcern, ensure no failing commands\n\n\n  if (cmd.readConcern) {\n    cmd = copy(cmd);\n    delete cmd['readConcern'];\n  } // Serialize functions\n\n\n  var serializeFunctions = typeof options.serializeFunctions == 'boolean' ? options.serializeFunctions : false;\n  var ignoreUndefined = typeof options.ignoreUndefined == 'boolean' ? options.ignoreUndefined : false; // Build Query object\n\n  var query = new Query(bson, ns, findCmd, {\n    numberToSkip: numberToSkip,\n    numberToReturn: numberToReturn,\n    checkKeys: false,\n    returnFieldSelector: cmd.fields,\n    serializeFunctions: serializeFunctions,\n    ignoreUndefined: ignoreUndefined\n  }); // Set query flags\n\n  query.slaveOk = readPreference.slaveOk(); // Set up the option bits for wire protocol\n\n  if (typeof cmd.tailable == 'boolean') {\n    query.tailable = cmd.tailable;\n  }\n\n  if (typeof cmd.oplogReplay == 'boolean') {\n    query.oplogReplay = cmd.oplogReplay;\n  }\n\n  if (typeof cmd.noCursorTimeout == 'boolean') {\n    query.noCursorTimeout = cmd.noCursorTimeout;\n  }\n\n  if (typeof cmd.awaitData == 'boolean') {\n    query.awaitData = cmd.awaitData;\n  }\n\n  if (typeof cmd.partial == 'boolean') {\n    query.partial = cmd.partial;\n  } // Return the query\n\n\n  return query;\n}; //\n// Set up a command cursor\n\n\nvar setupCommand = function (bson, ns, cmd, cursorState, topology, options) {\n  // Set empty options object\n  options = options || {}; // Get the readPreference\n\n  var readPreference = getReadPreference(cmd, options); // Final query\n\n  var finalCmd = {};\n\n  for (var name in cmd) {\n    finalCmd[name] = cmd[name];\n  } // Build command namespace\n\n\n  var parts = ns.split(/\\./); // Serialize functions\n\n  var serializeFunctions = typeof options.serializeFunctions == 'boolean' ? options.serializeFunctions : false;\n  var ignoreUndefined = typeof options.ignoreUndefined == 'boolean' ? options.ignoreUndefined : false; // Throw on majority readConcern passed in\n\n  if (cmd.readConcern && cmd.readConcern.level != 'local') {\n    throw new MongoError(f('server %s command does not support a readConcern level of %s', JSON.stringify(cmd), cmd.readConcern.level));\n  } // Remove readConcern, ensure no failing commands\n\n\n  if (cmd.readConcern) delete cmd['readConcern']; // We have a Mongos topology, check if we need to add a readPreference\n\n  if (topology.type == 'mongos' && readPreference && readPreference.preference != 'primary') {\n    finalCmd = {\n      '$query': finalCmd,\n      '$readPreference': readPreference.toJSON()\n    };\n  } // Build Query object\n\n\n  var query = new Query(bson, f('%s.$cmd', parts.shift()), finalCmd, {\n    numberToSkip: 0,\n    numberToReturn: -1,\n    checkKeys: false,\n    serializeFunctions: serializeFunctions,\n    ignoreUndefined: ignoreUndefined\n  }); // Set query flags\n\n  query.slaveOk = readPreference.slaveOk(); // Return the query\n\n  return query;\n};\n\nmodule.exports = WireProtocol;","map":null,"metadata":{},"sourceType":"script"}