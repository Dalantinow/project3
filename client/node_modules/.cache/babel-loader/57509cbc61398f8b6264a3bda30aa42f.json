{"ast":null,"code":"const express = require('express');\n\nconst bodyParser = require('body-parser');\n\nconst morgan = require('morgan');\n\nconst session = require('express-session');\n\nconst dbConnection = require('./models');\n\nconst MongoStore = require('connect-mongo')(session);\n\nconst mongoose = require(\"mongoose\");\n\nconst passport = require('./passport');\n\nconst app = express();\nconst PORT = process.env.PORT || 3001;\n\nconst cors = require(\"cors\");\n\nconst cheerio = require(\"cheerio\");\n\nrequire('dotenv').config();\n\nconst axios = require(\"axios\");\n\nconst Article = require(\"./models/Article\");\n\nconst Thumbnail = require(\"./models/Thumbnail\");\n\nconst path = require(\"path\"); // Route requires\n\n\napp.use(morgan(\"dev\"));\napp.use(express.urlencoded({\n  extended: true\n}));\napp.use(express.json());\napp.use(express.static(\"public\"));\napp.use(express.static(path.join(__dirname, \"client\", \"build\")));\napp.use(cors());\n\nconst user = require('./routes/user'); // MIDDLEWARE\n\n\napp.use(morgan('dev'));\napp.use(bodyParser.urlencoded({\n  extended: false\n}));\napp.use(bodyParser.json());\napp.use(session({\n  secret: 'fraggle-rock',\n  //pick a random string to make the hash that is generated secure\n  store: new MongoStore({\n    mongooseConnection: dbConnection\n  }),\n  resave: false,\n  //required\n  saveUninitialized: false //required\n\n})); // Passport\n\napp.use(passport.initialize());\napp.use(passport.session()); // calls the deserializeUser\n// Scraping\n\napp.get(\"/scrape\", (req, res) => {\n  axios.get(\"https://old.reddit.com/r/sports\").then(response => {\n    Article.deleteMany().then(result => console.log(\"Deleted \".concat(result.deletedCount, \" item(s).\"))).catch(err => console.error(\"Delete failed with error: \".concat(err)));\n    let $ = cheerio.load(response.data);\n    let results = {};\n\n    for (var i = 0; i < 1; i++) {\n      $(\"p.title\").each(function (i, element) {\n        results.title = $(this).children(\"a\").text();\n        results.link = $(this).children(\"a\").attr(\"href\"); // $(\"a.thumbnail\").each(function (i, element) {\n        // \tresults.thumbnail = $(this).children(\"img\").attr(\"src\");\n\n        console.log(results.title);\n        const newArticle = new Article({\n          title: results.title,\n          link: results.link,\n          thumbnail: results.thumbnail\n        });\n        newArticle.save((err, savedArticle) => {\n          if (err) return res.json(err);\n        });\n      }); // })\n    }\n\n    Article.find().then(articles => {\n      res.json(articles);\n    });\n  });\n}); // app.get(\"/thumbnail\", (req, res) => {\n// \taxios.get(\"https://old.reddit.com/r/sports\").then(response => {\n// \t\tThumbnail.deleteMany()\n// \t\t\t.then(result => console.log(`Deleted ${result.deletedCount} item(s).`))\n// \t\t\t.catch(err => console.error(`Delete failed with error: ${err}`))\n// \t\tlet $ = cheerio.load(response.data);\n// \t\tlet results = {};\n// \t\tfor (var i = 0; i < 1; i++) {\n// \t\t\t$(\"a.thumbnail\").each(function (i, element) {\n// \t\t\t\tresults.url = $(this).children(\"img\").attr(\"src\");\n// \t\t\t\tconst newThumbnail = new Thumbnail({\n// \t\t\t\t\turl: results.url\n// \t\t\t\t})\n// \t\t\t\tnewThumbnail.save((err, savedThumbnail) => {\n// \t\t\t\t\tif (err) return res.json(err)\n// \t\t\t\t})\n// \t\t\t});\n// \t\t};\n// \t\t\tThumbnail.find().then(thumbnails => {\n// \t\t\t\t\tres.json(thumbnails)\n// \t\t\t\t});\n// \t})\n// })\n// Routes\n\napp.use('/user', user);\napp.get(\"/articles\", (req, res) => {\n  Article.find().then(dbArticle => res.json(dbArticle));\n  console.log(dbArticle).catch(err => res.json(err));\n});\napp.post(\"/bid\", function (req, res) {\n  dbConnection.Bid.create(req.body).then(function (data) {\n    res.json(data);\n  });\n});\napp.get(\"/bid/:id\", (req, res) => {\n  dbConnection.Bid.findOne({\n    where: {\n      id: req.params.id\n    }\n  }).then(function (data) {\n    res.json(data);\n  });\n});\napp.get(\"*\", (req, res) => {\n  res.sendFile(path.join(__dirname, \"client\", \"build\", \"index.html\"));\n}); // Starting Server \n\napp.listen(PORT, () => {\n  console.log(\"App listening on PORT: \".concat(PORT));\n});","map":null,"metadata":{},"sourceType":"script"}