{"ast":null,"code":"/*!\n * uid-safe\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015-2017 Douglas Christopher Wilson\n * MIT Licensed\n */\n'use strict';\n/**\n * Module dependencies.\n * @private\n */\n\nvar randomBytes = require('random-bytes');\n/**\n * Module variables.\n * @private\n */\n\n\nvar EQUAL_END_REGEXP = /=+$/;\nvar PLUS_GLOBAL_REGEXP = /\\+/g;\nvar SLASH_GLOBAL_REGEXP = /\\//g;\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = uid;\nmodule.exports.sync = uidSync;\n/**\n * Create a unique ID.\n *\n * @param {number} length\n * @param {function} [callback]\n * @return {Promise}\n * @public\n */\n\nfunction uid(length, callback) {\n  // validate callback is a function, if provided\n  if (callback !== undefined && typeof callback !== 'function') {\n    throw new TypeError('argument callback must be a function');\n  } // require the callback without promises\n\n\n  if (!callback && !global.Promise) {\n    throw new TypeError('argument callback is required');\n  }\n\n  if (callback) {\n    // classic callback style\n    return generateUid(length, callback);\n  }\n\n  return new Promise(function executor(resolve, reject) {\n    generateUid(length, function onUid(err, str) {\n      if (err) return reject(err);\n      resolve(str);\n    });\n  });\n}\n/**\n * Create a unique ID sync.\n *\n * @param {number} length\n * @return {string}\n * @public\n */\n\n\nfunction uidSync(length) {\n  return toString(randomBytes.sync(length));\n}\n/**\n * Generate a unique ID string.\n *\n * @param {number} length\n * @param {function} callback\n * @private\n */\n\n\nfunction generateUid(length, callback) {\n  randomBytes(length, function (err, buf) {\n    if (err) return callback(err);\n    callback(null, toString(buf));\n  });\n}\n/**\n * Change a Buffer into a string.\n *\n * @param {Buffer} buf\n * @return {string}\n * @private\n */\n\n\nfunction toString(buf) {\n  return buf.toString('base64').replace(EQUAL_END_REGEXP, '').replace(PLUS_GLOBAL_REGEXP, '-').replace(SLASH_GLOBAL_REGEXP, '_');\n}","map":null,"metadata":{},"sourceType":"script"}