{"ast":null,"code":"var f = require('util').format;\n\nvar Define = function (name, object, stream) {\n  this.name = name;\n  this.object = object;\n  this.stream = typeof stream == 'boolean' ? stream : false;\n  this.instrumentations = {};\n};\n\nDefine.prototype.classMethod = function (name, options) {\n  var keys = Object.keys(options).sort();\n  var key = generateKey(keys, options); // Add a list of instrumentations\n\n  if (this.instrumentations[key] == null) {\n    this.instrumentations[key] = {\n      methods: [],\n      options: options\n    };\n  } // Push to list of method for this instrumentation\n\n\n  this.instrumentations[key].methods.push(name);\n};\n\nvar generateKey = function (keys, options) {\n  var parts = [];\n\n  for (var i = 0; i < keys.length; i++) {\n    parts.push(f('%s=%s', keys[i], options[keys[i]]));\n  }\n\n  return parts.join();\n};\n\nDefine.prototype.staticMethod = function (name, options) {\n  options.static = true;\n  var keys = Object.keys(options).sort();\n  var key = generateKey(keys, options); // Add a list of instrumentations\n\n  if (this.instrumentations[key] == null) {\n    this.instrumentations[key] = {\n      methods: [],\n      options: options\n    };\n  } // Push to list of method for this instrumentation\n\n\n  this.instrumentations[key].methods.push(name);\n};\n\nDefine.prototype.generate = function () {\n  // Generate the return object\n  var object = {\n    name: this.name,\n    obj: this.object,\n    stream: this.stream,\n    instrumentations: []\n  };\n\n  for (var name in this.instrumentations) {\n    object.instrumentations.push(this.instrumentations[name]);\n  }\n\n  return object;\n};\n\nmodule.exports = Define;","map":null,"metadata":{},"sourceType":"script"}