{"ast":null,"code":"/*!\n * random-bytes\n * Copyright(c) 2016 Douglas Christopher Wilson\n * MIT Licensed\n */\n'use strict';\n/**\n * Module dependencies.\n * @private\n */\n\nvar crypto = require('crypto');\n/**\n * Module variables.\n * @private\n */\n\n\nvar generateAttempts = crypto.randomBytes === crypto.pseudoRandomBytes ? 1 : 3;\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = randomBytes;\nmodule.exports.sync = randomBytesSync;\n/**\n * Generates strong pseudo-random bytes.\n *\n * @param {number} size\n * @param {function} [callback]\n * @return {Promise}\n * @public\n */\n\nfunction randomBytes(size, callback) {\n  // validate callback is a function, if provided\n  if (callback !== undefined && typeof callback !== 'function') {\n    throw new TypeError('argument callback must be a function');\n  } // require the callback without promises\n\n\n  if (!callback && !global.Promise) {\n    throw new TypeError('argument callback is required');\n  }\n\n  if (callback) {\n    // classic callback style\n    return generateRandomBytes(size, generateAttempts, callback);\n  }\n\n  return new Promise(function executor(resolve, reject) {\n    generateRandomBytes(size, generateAttempts, function onRandomBytes(err, str) {\n      if (err) return reject(err);\n      resolve(str);\n    });\n  });\n}\n/**\n * Generates strong pseudo-random bytes sync.\n *\n * @param {number} size\n * @return {Buffer}\n * @public\n */\n\n\nfunction randomBytesSync(size) {\n  var err = null;\n\n  for (var i = 0; i < generateAttempts; i++) {\n    try {\n      return crypto.randomBytes(size);\n    } catch (e) {\n      err = e;\n    }\n  }\n\n  throw err;\n}\n/**\n * Generates strong pseudo-random bytes.\n *\n * @param {number} size\n * @param {number} attempts\n * @param {function} callback\n * @private\n */\n\n\nfunction generateRandomBytes(size, attempts, callback) {\n  crypto.randomBytes(size, function onRandomBytes(err, buf) {\n    if (!err) return callback(null, buf);\n    if (! --attempts) return callback(err);\n    setTimeout(generateRandomBytes.bind(null, size, attempts, callback), 10);\n  });\n}","map":null,"metadata":{},"sourceType":"script"}