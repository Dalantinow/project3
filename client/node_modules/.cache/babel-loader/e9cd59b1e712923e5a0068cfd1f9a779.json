{"ast":null,"code":"var shallowClone = require('./utils').shallowClone,\n    handleCallback = require('./utils').handleCallback,\n    MongoError = require('mongodb-core').MongoError,\n    f = require('util').format;\n\nvar authenticate = function (self, username, password, options, callback) {\n  // Did the user destroy the topology\n  if (self.serverConfig && self.serverConfig.isDestroyed()) return callback(new MongoError('topology was destroyed')); // the default db to authenticate against is 'self'\n  // if authenticate is called from a retry context, it may be another one, like admin\n\n  var authdb = options.dbName ? options.dbName : self.databaseName;\n  authdb = self.authSource ? self.authSource : authdb;\n  authdb = options.authdb ? options.authdb : authdb;\n  authdb = options.authSource ? options.authSource : authdb; // Callback\n\n  var _callback = function (err, result) {\n    if (self.listeners('authenticated').length > 0) {\n      self.emit('authenticated', err, result);\n    } // Return to caller\n\n\n    handleCallback(callback, err, result);\n  }; // authMechanism\n\n\n  var authMechanism = options.authMechanism || '';\n  authMechanism = authMechanism.toUpperCase(); // If classic auth delegate to auth command\n\n  if (authMechanism == 'MONGODB-CR') {\n    self.s.topology.auth('mongocr', authdb, username, password, function (err) {\n      if (err) return handleCallback(callback, err, false);\n\n      _callback(null, true);\n    });\n  } else if (authMechanism == 'PLAIN') {\n    self.s.topology.auth('plain', authdb, username, password, function (err) {\n      if (err) return handleCallback(callback, err, false);\n\n      _callback(null, true);\n    });\n  } else if (authMechanism == 'MONGODB-X509') {\n    self.s.topology.auth('x509', authdb, username, password, function (err) {\n      if (err) return handleCallback(callback, err, false);\n\n      _callback(null, true);\n    });\n  } else if (authMechanism == 'SCRAM-SHA-1') {\n    self.s.topology.auth('scram-sha-1', authdb, username, password, function (err) {\n      if (err) return handleCallback(callback, err, false);\n\n      _callback(null, true);\n    });\n  } else if (authMechanism == 'GSSAPI') {\n    if (process.platform == 'win32') {\n      self.s.topology.auth('sspi', authdb, username, password, options, function (err) {\n        if (err) return handleCallback(callback, err, false);\n\n        _callback(null, true);\n      });\n    } else {\n      self.s.topology.auth('gssapi', authdb, username, password, options, function (err) {\n        if (err) return handleCallback(callback, err, false);\n\n        _callback(null, true);\n      });\n    }\n  } else if (authMechanism == 'DEFAULT') {\n    self.s.topology.auth('default', authdb, username, password, function (err) {\n      if (err) return handleCallback(callback, err, false);\n\n      _callback(null, true);\n    });\n  } else {\n    handleCallback(callback, MongoError.create({\n      message: f(\"authentication mechanism %s not supported\", options.authMechanism),\n      driver: true\n    }));\n  }\n};\n\nmodule.exports = function (self, username, password, options, callback) {\n  if (typeof options == 'function') callback = options, options = {}; // Shallow copy the options\n\n  options = shallowClone(options); // Set default mechanism\n\n  if (!options.authMechanism) {\n    options.authMechanism = 'DEFAULT';\n  } else if (options.authMechanism != 'GSSAPI' && options.authMechanism != 'DEFAULT' && options.authMechanism != 'MONGODB-CR' && options.authMechanism != 'MONGODB-X509' && options.authMechanism != 'SCRAM-SHA-1' && options.authMechanism != 'PLAIN') {\n    return handleCallback(callback, MongoError.create({\n      message: \"only DEFAULT, GSSAPI, PLAIN, MONGODB-X509, SCRAM-SHA-1 or MONGODB-CR is supported by authMechanism\",\n      driver: true\n    }));\n  } // If we have a callback fallback\n\n\n  if (typeof callback == 'function') return authenticate(self, username, password, options, function (err, r) {\n    // Support failed auth method\n    if (err && err.message && err.message.indexOf('saslStart') != -1) err.code = 59; // Reject error\n\n    if (err) return callback(err, r);\n    callback(null, r);\n  }); // Return a promise\n\n  return new self.s.promiseLibrary(function (resolve, reject) {\n    authenticate(self, username, password, options, function (err, r) {\n      // Support failed auth method\n      if (err && err.message && err.message.indexOf('saslStart') != -1) err.code = 59; // Reject error\n\n      if (err) return reject(err);\n      resolve(r);\n    });\n  });\n};","map":null,"metadata":{},"sourceType":"script"}