{"ast":null,"code":"\"use strict\";\n\nvar inherits = require('util').inherits,\n    f = require('util').format,\n    EventEmitter = require('events').EventEmitter,\n    BasicCursor = require('../cursor'),\n    Logger = require('../connection/logger'),\n    retrieveBSON = require('../connection/utils').retrieveBSON,\n    MongoError = require('../error'),\n    Server = require('./server'),\n    assign = require('../utils').assign,\n    clone = require('./shared').clone,\n    sdam = require('./shared'),\n    diff = require('./shared').diff,\n    cloneOptions = require('./shared').cloneOptions,\n    createClientInfo = require('./shared').createClientInfo;\n\nvar BSON = retrieveBSON();\n/**\n * @fileOverview The **Mongos** class is a class that represents a Mongos Proxy topology and is\n * used to construct connections.\n *\n * @example\n * var Mongos = require('mongodb-core').Mongos\n *   , ReadPreference = require('mongodb-core').ReadPreference\n *   , assert = require('assert');\n *\n * var server = new Mongos([{host: 'localhost', port: 30000}]);\n * // Wait for the connection event\n * server.on('connect', function(server) {\n *   server.destroy();\n * });\n *\n * // Start connecting\n * server.connect();\n */\n\nvar MongoCR = require('../auth/mongocr'),\n    X509 = require('../auth/x509'),\n    Plain = require('../auth/plain'),\n    GSSAPI = require('../auth/gssapi'),\n    SSPI = require('../auth/sspi'),\n    ScramSHA1 = require('../auth/scram'); //\n// States\n\n\nvar DISCONNECTED = 'disconnected';\nvar CONNECTING = 'connecting';\nvar CONNECTED = 'connected';\nvar UNREFERENCED = 'unreferenced';\nvar DESTROYED = 'destroyed';\n\nfunction stateTransition(self, newState) {\n  var legalTransitions = {\n    'disconnected': [CONNECTING, DESTROYED, DISCONNECTED],\n    'connecting': [CONNECTING, DESTROYED, CONNECTED, DISCONNECTED],\n    'connected': [CONNECTED, DISCONNECTED, DESTROYED, UNREFERENCED],\n    'unreferenced': [UNREFERENCED, DESTROYED],\n    'destroyed': [DESTROYED] // Get current state\n\n  };\n  var legalStates = legalTransitions[self.state];\n\n  if (legalStates && legalStates.indexOf(newState) != -1) {\n    self.state = newState;\n  } else {\n    self.logger.error(f('Pool with id [%s] failed attempted illegal state transition from [%s] to [%s] only following state allowed [%s]', self.id, self.state, newState, legalStates));\n  }\n} //\n// ReplSet instance id\n\n\nvar id = 1;\nvar handlers = ['connect', 'close', 'error', 'timeout', 'parseError'];\n/**\n * Creates a new Mongos instance\n * @class\n * @param {array} seedlist A list of seeds for the replicaset\n * @param {number} [options.haInterval=5000] The High availability period for replicaset inquiry\n * @param {Cursor} [options.cursorFactory=Cursor] The cursor factory class used for all query cursors\n * @param {number} [options.size=5] Server connection pool size\n * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.keepAliveInitialDelay=0] Initial delay before TCP keep alive enabled\n * @param {number} [options.localThresholdMS=15] Cutoff latency point in MS for MongoS proxy selection\n * @param {boolean} [options.noDelay=true] TCP Connection no delay\n * @param {number} [options.connectionTimeout=1000] TCP Connection timeout setting\n * @param {number} [options.socketTimeout=0] TCP Socket timeout setting\n * @param {boolean} [options.singleBufferSerializtion=true] Serialize into single buffer, trade of peak memory for serialization speed\n * @param {boolean} [options.ssl=false] Use SSL for connection\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {Buffer} [options.ca] SSL Certificate store binary buffer\n * @param {Buffer} [options.crl] SSL Certificate revocation store binary buffer\n * @param {Buffer} [options.cert] SSL Certificate binary buffer\n * @param {Buffer} [options.key] SSL Key file binary buffer\n * @param {string} [options.passphrase] SSL Certificate pass phrase\n * @param {string} [options.servername=null] String containing the server name requested via TLS SNI.\n * @param {boolean} [options.rejectUnauthorized=true] Reject unauthorized server certificates\n * @param {boolean} [options.promoteLongs=true] Convert Long values from the db into Numbers if they fit into 53 bits\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.\n * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit.\n * @return {Mongos} A cursor instance\n * @fires Mongos#connect\n * @fires Mongos#reconnect\n * @fires Mongos#joined\n * @fires Mongos#left\n * @fires Mongos#failed\n * @fires Mongos#fullsetup\n * @fires Mongos#all\n * @fires Mongos#serverHeartbeatStarted\n * @fires Mongos#serverHeartbeatSucceeded\n * @fires Mongos#serverHeartbeatFailed\n * @fires Mongos#topologyOpening\n * @fires Mongos#topologyClosed\n * @fires Mongos#topologyDescriptionChanged\n * @property {string} type the topology type.\n * @property {string} parserType the parser type used (c++ or js).\n */\n\nvar Mongos = function (seedlist, options) {\n  options = options || {}; // Get replSet Id\n\n  this.id = id++; // Internal state\n\n  this.s = {\n    options: assign({}, options),\n    // BSON instance\n    bson: options.bson || new BSON([BSON.Binary, BSON.Code, BSON.DBRef, BSON.Decimal128, BSON.Double, BSON.Int32, BSON.Long, BSON.Map, BSON.MaxKey, BSON.MinKey, BSON.ObjectId, BSON.BSONRegExp, BSON.Symbol, BSON.Timestamp]),\n    // Factory overrides\n    Cursor: options.cursorFactory || BasicCursor,\n    // Logger instance\n    logger: Logger('Mongos', options),\n    // Seedlist\n    seedlist: seedlist,\n    // Ha interval\n    haInterval: options.haInterval ? options.haInterval : 10000,\n    // Disconnect handler\n    disconnectHandler: options.disconnectHandler,\n    // Server selection index\n    index: 0,\n    // Connect function options passed in\n    connectOptions: {},\n    // Are we running in debug mode\n    debug: typeof options.debug == 'boolean' ? options.debug : false,\n    // localThresholdMS\n    localThresholdMS: options.localThresholdMS || 15,\n    // Client info\n    clientInfo: createClientInfo(options),\n    // Authentication context\n    authenticationContexts: [] // Set the client info\n\n  };\n  this.s.options.clientInfo = createClientInfo(options); // Log info warning if the socketTimeout < haInterval as it will cause\n  // a lot of recycled connections to happen.\n\n  if (this.s.logger.isWarn() && this.s.options.socketTimeout != 0 && this.s.options.socketTimeout < this.s.haInterval) {\n    this.s.logger.warn(f('warning socketTimeout %s is less than haInterval %s. This might cause unnecessary server reconnections due to socket timeouts', this.s.options.socketTimeout, this.s.haInterval));\n  } // All the authProviders\n\n\n  this.authProviders = options.authProviders || {\n    'mongocr': new MongoCR(this.s.bson),\n    'x509': new X509(this.s.bson),\n    'plain': new Plain(this.s.bson),\n    'gssapi': new GSSAPI(this.s.bson),\n    'sspi': new SSPI(this.s.bson),\n    'scram-sha-1': new ScramSHA1(this.s.bson) // Disconnected state\n\n  };\n  this.state = DISCONNECTED; // Current proxies we are connecting to\n\n  this.connectingProxies = []; // Currently connected proxies\n\n  this.connectedProxies = []; // Disconnected proxies\n\n  this.disconnectedProxies = []; // Are we authenticating\n\n  this.authenticating = false; // Index of proxy to run operations against\n\n  this.index = 0; // High availability timeout id\n\n  this.haTimeoutId = null; // Last ismaster\n\n  this.ismaster = null; // Description of the Replicaset\n\n  this.topologyDescription = {\n    \"topologyType\": \"Unknown\",\n    \"servers\": []\n  }; // Add event listener\n\n  EventEmitter.call(this);\n};\n\ninherits(Mongos, EventEmitter);\nObject.defineProperty(Mongos.prototype, 'type', {\n  enumerable: true,\n  get: function () {\n    return 'mongos';\n  }\n});\nObject.defineProperty(Mongos.prototype, 'parserType', {\n  enumerable: true,\n  get: function () {\n    return BSON.native ? \"c++\" : \"js\";\n  }\n});\n/**\n * Emit event if it exists\n * @method\n */\n\nfunction emitSDAMEvent(self, event, description) {\n  if (self.listeners(event).length > 0) {\n    self.emit(event, description);\n  }\n}\n/**\n * Initiate server connect\n * @method\n * @param {array} [options.auth=null] Array of auth options to apply on connect\n */\n\n\nMongos.prototype.connect = function (options) {\n  var self = this; // Add any connect level options to the internal state\n\n  this.s.connectOptions = options || {}; // Set connecting state\n\n  stateTransition(this, CONNECTING); // Create server instances\n\n  var servers = this.s.seedlist.map(function (x) {\n    return new Server(assign({}, self.s.options, x, {\n      authProviders: self.authProviders,\n      reconnect: false,\n      monitoring: false,\n      inTopology: true\n    }, {\n      clientInfo: clone(self.s.clientInfo)\n    }));\n  });\n  servers.forEach(function (server) {\n    server.on('serverDescriptionChanged', function (event) {\n      self.emit('serverDescriptionChanged', event);\n    });\n  }); // Emit the topology opening event\n\n  emitSDAMEvent(this, 'topologyOpening', {\n    topologyId: this.id\n  }); // Start all server connections\n\n  connectProxies(self, servers);\n};\n\nfunction handleEvent(self) {\n  return function () {\n    if (self.state == DESTROYED) return; // Move to list of disconnectedProxies\n\n    moveServerFrom(self.connectedProxies, self.disconnectedProxies, this); // Emit the initial topology\n\n    emitTopologyDescriptionChanged(self); // Emit the left signal\n\n    self.emit('left', 'mongos', this); // Emit the sdam event\n\n    self.emit('serverClosed', {\n      topologyId: self.id,\n      address: this.name\n    });\n  };\n}\n\nfunction handleInitialConnectEvent(self, event) {\n  return function () {\n    var _this = this; // Destroy the instance\n\n\n    if (self.state == DESTROYED) {\n      // Emit the initial topology\n      emitTopologyDescriptionChanged(self); // Move from connectingProxies\n\n      moveServerFrom(self.connectingProxies, self.disconnectedProxies, this);\n      return this.destroy();\n    } // Check the type of server\n\n\n    if (event == 'connect') {\n      // Do we have authentication contexts that need to be applied\n      applyAuthenticationContexts(self, _this, function () {\n        // Get last known ismaster\n        self.ismaster = _this.lastIsMaster(); // Is this not a proxy, remove t\n\n        if (self.ismaster.msg == 'isdbgrid') {\n          // Add to the connectd list\n          for (var i = 0; i < self.connectedProxies.length; i++) {\n            if (self.connectedProxies[i].name == _this.name) {\n              // Move from connectingProxies\n              moveServerFrom(self.connectingProxies, self.disconnectedProxies, _this); // Emit the initial topology\n\n              emitTopologyDescriptionChanged(self);\n\n              _this.destroy();\n\n              return self.emit('failed', _this);\n            }\n          } // Remove the handlers\n\n\n          for (i = 0; i < handlers.length; i++) {\n            _this.removeAllListeners(handlers[i]);\n          } // Add stable state handlers\n\n\n          _this.on('error', handleEvent(self, 'error'));\n\n          _this.on('close', handleEvent(self, 'close'));\n\n          _this.on('timeout', handleEvent(self, 'timeout'));\n\n          _this.on('parseError', handleEvent(self, 'parseError')); // Move from connecting proxies connected\n\n\n          moveServerFrom(self.connectingProxies, self.connectedProxies, _this); // Emit the joined event\n\n          self.emit('joined', 'mongos', _this);\n        } else {\n          // Print warning if we did not find a mongos proxy\n          if (self.s.logger.isWarn()) {\n            var message = 'expected mongos proxy, but found replicaset member mongod for server %s'; // We have a standalone server\n\n            if (!self.ismaster.hosts) {\n              message = 'expected mongos proxy, but found standalone mongod for server %s';\n            }\n\n            self.s.logger.warn(f(message, _this.name));\n          } // This is not a mongos proxy, remove it completely\n\n\n          removeProxyFrom(self.connectingProxies, _this); // Emit the left event\n\n          self.emit('left', 'server', _this); // Emit failed event\n\n          self.emit('failed', _this);\n        }\n      });\n    } else {\n      moveServerFrom(self.connectingProxies, self.disconnectedProxies, this); // Emit the left event\n\n      self.emit('left', 'mongos', this); // Emit failed event\n\n      self.emit('failed', this);\n    } // Emit the initial topology\n\n\n    emitTopologyDescriptionChanged(self); // Trigger topologyMonitor\n\n    if (self.connectingProxies.length == 0) {\n      // Emit connected if we are connected\n      if (self.connectedProxies.length > 0) {\n        // Set the state to connected\n        stateTransition(self, CONNECTED); // Emit the connect event\n\n        self.emit('connect', self);\n        self.emit('fullsetup', self);\n        self.emit('all', self);\n      } else if (self.disconnectedProxies.length == 0) {\n        // Print warning if we did not find a mongos proxy\n        if (self.s.logger.isWarn()) {\n          self.s.logger.warn(f('no mongos proxies found in seed list, did you mean to connect to a replicaset'));\n        } // Emit the error that no proxies were found\n\n\n        return self.emit('error', new MongoError('no mongos proxies found in seed list'));\n      } // Topology monitor\n\n\n      topologyMonitor(self, {\n        firstConnect: true\n      });\n    }\n  };\n}\n\nfunction connectProxies(self, servers) {\n  // Update connectingProxies\n  self.connectingProxies = self.connectingProxies.concat(servers); // Index used to interleaf the server connects, avoiding\n  // runtime issues on io constrained vm's\n\n  var timeoutInterval = 0;\n\n  function connect(server, timeoutInterval) {\n    setTimeout(function () {\n      // Emit opening server event\n      self.emit('serverOpening', {\n        topologyId: self.id,\n        address: server.name\n      }); // Emit the initial topology\n\n      emitTopologyDescriptionChanged(self); // Add event handlers\n\n      server.once('close', handleInitialConnectEvent(self, 'close'));\n      server.once('timeout', handleInitialConnectEvent(self, 'timeout'));\n      server.once('parseError', handleInitialConnectEvent(self, 'parseError'));\n      server.once('error', handleInitialConnectEvent(self, 'error'));\n      server.once('connect', handleInitialConnectEvent(self, 'connect')); // Start connection\n\n      server.connect(self.s.connectOptions);\n    }, timeoutInterval);\n  } // Start all the servers\n\n\n  while (servers.length > 0) {\n    connect(servers.shift(), timeoutInterval++);\n  }\n}\n\nfunction pickProxy(self) {\n  // Get the currently connected Proxies\n  var connectedProxies = self.connectedProxies.slice(0); // Set lower bound\n\n  var lowerBoundLatency = Number.MAX_VALUE; // Determine the lower bound for the Proxies\n\n  for (var i = 0; i < connectedProxies.length; i++) {\n    if (connectedProxies[i].lastIsMasterMS < lowerBoundLatency) {\n      lowerBoundLatency = connectedProxies[i].lastIsMasterMS;\n    }\n  } // Filter out the possible servers\n\n\n  connectedProxies = connectedProxies.filter(function (server) {\n    if (server.lastIsMasterMS <= lowerBoundLatency + self.s.localThresholdMS && server.isConnected()) {\n      return true;\n    }\n  }); // We have no connectedProxies pick first of the connected ones\n\n  if (connectedProxies.length == 0) {\n    return self.connectedProxies[0];\n  } // Get proxy\n\n\n  var proxy = connectedProxies[self.index % connectedProxies.length]; // Update the index\n\n  self.index = (self.index + 1) % connectedProxies.length; // Return the proxy\n\n  return proxy;\n}\n\nfunction moveServerFrom(from, to, proxy) {\n  for (var i = 0; i < from.length; i++) {\n    if (from[i].name == proxy.name) {\n      from.splice(i, 1);\n    }\n  }\n\n  for (i = 0; i < to.length; i++) {\n    if (to[i].name == proxy.name) {\n      to.splice(i, 1);\n    }\n  }\n\n  to.push(proxy);\n}\n\nfunction removeProxyFrom(from, proxy) {\n  for (var i = 0; i < from.length; i++) {\n    if (from[i].name == proxy.name) {\n      from.splice(i, 1);\n    }\n  }\n}\n\nfunction reconnectProxies(self, proxies, callback) {\n  // Count lefts\n  var count = proxies.length; // Handle events\n\n  var _handleEvent = function (self, event) {\n    return function () {\n      var _self = this;\n\n      count = count - 1; // Destroyed\n\n      if (self.state == DESTROYED || self.state == UNREFERENCED) {\n        moveServerFrom(self.connectingProxies, self.disconnectedProxies, _self); // Return destroy\n\n        return this.destroy();\n      }\n\n      if (event == 'connect' && !self.authenticating) {\n        // Do we have authentication contexts that need to be applied\n        applyAuthenticationContexts(self, _self, function () {\n          // Destroyed\n          if (self.state == DESTROYED || self.state == UNREFERENCED) {\n            moveServerFrom(self.connectingProxies, self.disconnectedProxies, _self);\n            return _self.destroy();\n          } // Remove the handlers\n\n\n          for (var i = 0; i < handlers.length; i++) {\n            _self.removeAllListeners(handlers[i]);\n          } // Add stable state handlers\n\n\n          _self.on('error', handleEvent(self, 'error'));\n\n          _self.on('close', handleEvent(self, 'close'));\n\n          _self.on('timeout', handleEvent(self, 'timeout'));\n\n          _self.on('parseError', handleEvent(self, 'parseError')); // Move to the connected servers\n\n\n          moveServerFrom(self.disconnectedProxies, self.connectedProxies, _self); // Emit topology Change\n\n          emitTopologyDescriptionChanged(self); // Emit joined event\n\n          self.emit('joined', 'mongos', _self);\n        });\n      } else if (event == 'connect' && self.authenticating) {\n        // Move from connectingProxies\n        moveServerFrom(self.connectingProxies, self.disconnectedProxies, _self);\n        this.destroy();\n      } // Are we done finish up callback\n\n\n      if (count == 0) {\n        callback();\n      }\n    };\n  }; // No new servers\n\n\n  if (count == 0) {\n    return callback();\n  } // Execute method\n\n\n  function execute(_server, i) {\n    setTimeout(function () {\n      // Destroyed\n      if (self.state == DESTROYED || self.state == UNREFERENCED) {\n        return;\n      } // Create a new server instance\n\n\n      var server = new Server(assign({}, self.s.options, {\n        host: _server.name.split(':')[0],\n        port: parseInt(_server.name.split(':')[1], 10)\n      }, {\n        authProviders: self.authProviders,\n        reconnect: false,\n        monitoring: false,\n        inTopology: true\n      }, {\n        clientInfo: clone(self.s.clientInfo)\n      })); // Relay the server description change\n\n      server.on('serverDescriptionChanged', function (event) {\n        self.emit('serverDescriptionChanged', event);\n      }); // Emit opening server event\n\n      self.emit('serverOpening', {\n        topologyId: server.s.topologyId != -1 ? server.s.topologyId : self.id,\n        address: server.name\n      }); // Add temp handlers\n\n      server.once('connect', _handleEvent(self, 'connect'));\n      server.once('close', _handleEvent(self, 'close'));\n      server.once('timeout', _handleEvent(self, 'timeout'));\n      server.once('error', _handleEvent(self, 'error'));\n      server.once('parseError', _handleEvent(self, 'parseError')); // Connect to proxy\n\n      server.connect(self.s.connectOptions);\n    }, i);\n  } // Create new instances\n\n\n  for (var i = 0; i < proxies.length; i++) {\n    execute(proxies[i], i);\n  }\n}\n\nfunction applyAuthenticationContexts(self, server, callback) {\n  if (self.s.authenticationContexts.length == 0) {\n    return callback();\n  } // Copy contexts to ensure no modificiation in the middle of\n  // auth process.\n\n\n  var authContexts = self.s.authenticationContexts.slice(0); // Apply one of the contexts\n\n  function applyAuth(authContexts, server, callback) {\n    if (authContexts.length == 0) return callback(); // Get the first auth context\n\n    var authContext = authContexts.shift(); // Copy the params\n\n    var customAuthContext = authContext.slice(0); // Push our callback handler\n\n    customAuthContext.push(function (err) {\n      applyAuth(authContexts, server, callback);\n    }); // Attempt authentication\n\n    server.auth.apply(server, customAuthContext);\n  } // Apply all auth contexts\n\n\n  applyAuth(authContexts, server, callback);\n}\n\nfunction topologyMonitor(self, options) {\n  options = options || {}; // Set momitoring timeout\n\n  self.haTimeoutId = setTimeout(function () {\n    if (self.state == DESTROYED || self.state == UNREFERENCED) return; // If we have a primary and a disconnect handler, execute\n    // buffered operations\n\n    if (self.isConnected() && self.s.disconnectHandler) {\n      self.s.disconnectHandler.execute();\n    } // Get the connectingServers\n\n\n    var proxies = self.connectedProxies.slice(0); // Get the count\n\n    var count = proxies.length; // If the count is zero schedule a new fast\n\n    function pingServer(_self, _server, cb) {\n      // Measure running time\n      var start = new Date().getTime(); // Emit the server heartbeat start\n\n      emitSDAMEvent(self, 'serverHeartbeatStarted', {\n        connectionId: _server.name\n      }); // Execute ismaster\n\n      _server.command('admin.$cmd', {\n        ismaster: true\n      }, {\n        monitoring: true,\n        socketTimeout: self.s.options.connectionTimeout || 2000\n      }, function (err, r) {\n        if (self.state == DESTROYED || self.state == UNREFERENCED) {\n          // Move from connectingProxies\n          moveServerFrom(self.connectedProxies, self.disconnectedProxies, _server);\n\n          _server.destroy();\n\n          return cb(err, r);\n        } // Calculate latency\n\n\n        var latencyMS = new Date().getTime() - start; // We had an error, remove it from the state\n\n        if (err) {\n          // Emit the server heartbeat failure\n          emitSDAMEvent(self, 'serverHeartbeatFailed', {\n            durationMS: latencyMS,\n            failure: err,\n            connectionId: _server.name\n          }); // Move from connected proxies to disconnected proxies\n\n          moveServerFrom(self.connectedProxies, self.disconnectedProxies, _server);\n        } else {\n          // Update the server ismaster\n          _server.ismaster = r.result;\n          _server.lastIsMasterMS = latencyMS; // Server heart beat event\n\n          emitSDAMEvent(self, 'serverHeartbeatSucceeded', {\n            durationMS: latencyMS,\n            reply: r.result,\n            connectionId: _server.name\n          });\n        }\n\n        cb(err, r);\n      });\n    } // No proxies initiate monitor again\n\n\n    if (proxies.length == 0) {\n      // Emit close event if any listeners registered\n      if (self.listeners(\"close\").length > 0 && self.state == CONNECTING) {\n        self.emit('error', new MongoError('no mongos proxy available'));\n      } else {\n        self.emit('close', self);\n      } // Attempt to connect to any unknown servers\n\n\n      return reconnectProxies(self, self.disconnectedProxies, function () {\n        if (self.state == DESTROYED || self.state == UNREFERENCED) return; // Are we connected ? emit connect event\n\n        if (self.state == CONNECTING && options.firstConnect) {\n          self.emit('connect', self);\n          self.emit('fullsetup', self);\n          self.emit('all', self);\n        } else if (self.isConnected()) {\n          self.emit('reconnect', self);\n        } else if (!self.isConnected() && self.listeners(\"close\").length > 0) {\n          self.emit('close', self);\n        } // Perform topology monitor\n\n\n        topologyMonitor(self);\n      });\n    } // Ping all servers\n\n\n    for (var i = 0; i < proxies.length; i++) {\n      pingServer(self, proxies[i], function () {\n        count = count - 1;\n\n        if (count == 0) {\n          if (self.state == DESTROYED || self.state == UNREFERENCED) return; // Attempt to connect to any unknown servers\n\n          reconnectProxies(self, self.disconnectedProxies, function () {\n            if (self.state == DESTROYED || self.state == UNREFERENCED) return; // Perform topology monitor\n\n            topologyMonitor(self);\n          });\n        }\n      });\n    }\n  }, self.s.haInterval);\n}\n/**\n * Returns the last known ismaster document for this server\n * @method\n * @return {object}\n */\n\n\nMongos.prototype.lastIsMaster = function () {\n  return this.ismaster;\n};\n/**\n * Unref all connections belong to this server\n * @method\n */\n\n\nMongos.prototype.unref = function () {\n  // Transition state\n  stateTransition(this, UNREFERENCED); // Get all proxies\n\n  var proxies = this.connectedProxies.concat(this.connectingProxies);\n  proxies.forEach(function (x) {\n    x.unref();\n  });\n  clearTimeout(this.haTimeoutId);\n};\n/**\n * Destroy the server connection\n * @param {boolean} [options.force=false] Force destroy the pool\n * @method\n */\n\n\nMongos.prototype.destroy = function (options) {\n  var self = this; // Transition state\n\n  stateTransition(this, DESTROYED); // Get all proxies\n\n  var proxies = this.connectedProxies.concat(this.connectingProxies); // Clear out any monitoring process\n\n  if (this.haTimeoutId) clearTimeout(this.haTimeoutId); // Clear out authentication contexts\n\n  this.s.authenticationContexts = []; // Destroy all connecting servers\n\n  proxies.forEach(function (x) {\n    // Emit the sdam event\n    self.emit('serverClosed', {\n      topologyId: self.id,\n      address: x.name\n    }); // Destroy the server\n\n    x.destroy(options); // Move to list of disconnectedProxies\n\n    moveServerFrom(self.connectedProxies, self.disconnectedProxies, x);\n  }); // Emit the final topology change\n\n  emitTopologyDescriptionChanged(self); // Emit toplogy closing event\n\n  emitSDAMEvent(this, 'topologyClosed', {\n    topologyId: this.id\n  });\n};\n/**\n * Figure out if the server is connected\n * @method\n * @return {boolean}\n */\n\n\nMongos.prototype.isConnected = function () {\n  return this.connectedProxies.length > 0;\n};\n/**\n * Figure out if the server instance was destroyed by calling destroy\n * @method\n * @return {boolean}\n */\n\n\nMongos.prototype.isDestroyed = function () {\n  return this.state == DESTROYED;\n}; //\n// Operations\n//\n// Execute write operation\n\n\nvar executeWriteOperation = function (self, op, ns, ops, options, callback) {\n  if (typeof options == 'function') callback = options, options = {}, options = options || {}; // Ensure we have no options\n\n  options = options || {}; // Pick a server\n\n  var server = pickProxy(self); // No server found error out\n\n  if (!server) return callback(new MongoError('no mongos proxy available')); // Execute the command\n\n  server[op](ns, ops, options, callback);\n};\n/**\n * Insert one or more documents\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of documents to insert\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {opResultCallback} callback A callback function\n */\n\n\nMongos.prototype.insert = function (ns, ops, options, callback) {\n  if (typeof options == 'function') callback = options, options = {}, options = options || {};\n  if (this.state == DESTROYED) return callback(new MongoError(f('topology was destroyed'))); // Not connected but we have a disconnecthandler\n\n  if (!this.isConnected() && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('insert', ns, ops, options, callback);\n  } // No mongos proxy available\n\n\n  if (!this.isConnected()) {\n    return callback(new MongoError('no mongos proxy available'));\n  } // Execute write operation\n\n\n  executeWriteOperation(this, 'insert', ns, ops, options, callback);\n};\n/**\n * Perform one or more update operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of updates\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {opResultCallback} callback A callback function\n */\n\n\nMongos.prototype.update = function (ns, ops, options, callback) {\n  if (typeof options == 'function') callback = options, options = {}, options = options || {};\n  if (this.state == DESTROYED) return callback(new MongoError(f('topology was destroyed'))); // Not connected but we have a disconnecthandler\n\n  if (!this.isConnected() && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('update', ns, ops, options, callback);\n  } // No mongos proxy available\n\n\n  if (!this.isConnected()) {\n    return callback(new MongoError('no mongos proxy available'));\n  } // Execute write operation\n\n\n  executeWriteOperation(this, 'update', ns, ops, options, callback);\n};\n/**\n * Perform one or more remove operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of removes\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {opResultCallback} callback A callback function\n */\n\n\nMongos.prototype.remove = function (ns, ops, options, callback) {\n  if (typeof options == 'function') callback = options, options = {}, options = options || {};\n  if (this.state == DESTROYED) return callback(new MongoError(f('topology was destroyed'))); // Not connected but we have a disconnecthandler\n\n  if (!this.isConnected() && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('remove', ns, ops, options, callback);\n  } // No mongos proxy available\n\n\n  if (!this.isConnected()) {\n    return callback(new MongoError('no mongos proxy available'));\n  } // Execute write operation\n\n\n  executeWriteOperation(this, 'remove', ns, ops, options, callback);\n};\n/**\n * Execute a command\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {object} cmd The command hash\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Connection} [options.connection] Specify connection object to execute command against\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {opResultCallback} callback A callback function\n */\n\n\nMongos.prototype.command = function (ns, cmd, options, callback) {\n  if (typeof options == 'function') callback = options, options = {}, options = options || {};\n  if (this.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));\n  var self = this; // Pick a proxy\n\n  var server = pickProxy(self); // Topology is not connected, save the call in the provided store to be\n  // Executed at some point when the handler deems it's reconnected\n\n  if ((server == null || !server.isConnected()) && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('command', ns, cmd, options, callback);\n  } // No server returned we had an error\n\n\n  if (server == null) {\n    return callback(new MongoError('no mongos proxy available'));\n  } // Cloned options\n\n\n  var clonedOptions = cloneOptions(options);\n  clonedOptions.topology = self; // Execute the command\n\n  server.command(ns, cmd, clonedOptions, callback);\n};\n/**\n * Perform one or more remove operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {{object}|{Long}} cmd Can be either a command returning a cursor or a cursorId\n * @param {object} [options.batchSize=0] Batchsize for the operation\n * @param {array} [options.documents=[]] Initial documents list for cursor\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {opResultCallback} callback A callback function\n */\n\n\nMongos.prototype.cursor = function (ns, cmd, cursorOptions) {\n  cursorOptions = cursorOptions || {};\n  var FinalCursor = cursorOptions.cursorFactory || this.s.Cursor;\n  return new FinalCursor(this.s.bson, ns, cmd, cursorOptions, this, this.s.options);\n};\n/**\n * Authenticate using a specified mechanism\n * @method\n * @param {string} mechanism The Auth mechanism we are invoking\n * @param {string} db The db we are invoking the mechanism against\n * @param {...object} param Parameters for the specific mechanism\n * @param {authResultCallback} callback A callback function\n */\n\n\nMongos.prototype.auth = function (mechanism, db) {\n  var allArgs = Array.prototype.slice.call(arguments, 0).slice(0);\n  var self = this;\n  var args = Array.prototype.slice.call(arguments, 2);\n  var callback = args.pop();\n  var currentContextIndex = 0; // If we don't have the mechanism fail\n\n  if (this.authProviders[mechanism] == null && mechanism != 'default') {\n    return callback(new MongoError(f(\"auth provider %s does not exist\", mechanism)));\n  } // Are we already authenticating, throw\n\n\n  if (this.authenticating) {\n    return callback(new MongoError('authentication or logout allready in process'));\n  } // Topology is not connected, save the call in the provided store to be\n  // Executed at some point when the handler deems it's reconnected\n\n\n  if (!self.isConnected() && self.s.disconnectHandler != null) {\n    return self.s.disconnectHandler.add('auth', db, allArgs, {}, callback);\n  } // Set to authenticating\n\n\n  this.authenticating = true; // All errors\n\n  var errors = []; // Get all the servers\n\n  var servers = this.connectedProxies.slice(0); // No servers return\n\n  if (servers.length == 0) {\n    this.authenticating = false;\n    callback(null, true);\n  } // Authenticate\n\n\n  function auth(server) {\n    // Arguments without a callback\n    var argsWithoutCallback = [mechanism, db].concat(args.slice(0)); // Create arguments\n\n    var finalArguments = argsWithoutCallback.concat([function (err) {\n      count = count - 1; // Save all the errors\n\n      if (err) errors.push({\n        name: server.name,\n        err: err\n      }); // We are done\n\n      if (count == 0) {\n        // Auth is done\n        self.authenticating = false; // Return the auth error\n\n        if (errors.length) {\n          // Remove the entry from the stored authentication contexts\n          self.s.authenticationContexts.splice(currentContextIndex, 0); // Return error\n\n          return callback(MongoError.create({\n            message: 'authentication fail',\n            errors: errors\n          }), false);\n        } // Successfully authenticated session\n\n\n        callback(null, self);\n      }\n    }]); // Execute the auth only against non arbiter servers\n\n    if (!server.lastIsMaster().arbiterOnly) {\n      server.auth.apply(server, finalArguments);\n    }\n  } // Save current context index\n\n\n  currentContextIndex = this.s.authenticationContexts.length; // Store the auth context and return the last index\n\n  this.s.authenticationContexts.push([mechanism, db].concat(args.slice(0))); // Get total count\n\n  var count = servers.length; // Authenticate against all servers\n\n  while (servers.length > 0) {\n    auth(servers.shift());\n  }\n};\n/**\n * Logout from a database\n * @method\n * @param {string} db The db we are logging out from\n * @param {authResultCallback} callback A callback function\n */\n\n\nMongos.prototype.logout = function (dbName, callback) {\n  var self = this; // Are we authenticating or logging out, throw\n\n  if (this.authenticating) {\n    throw new MongoError('authentication or logout allready in process');\n  } // Ensure no new members are processed while logging out\n\n\n  this.authenticating = true; // Remove from all auth providers (avoid any reaplication of the auth details)\n\n  var providers = Object.keys(this.authProviders);\n\n  for (var i = 0; i < providers.length; i++) {\n    this.authProviders[providers[i]].logout(dbName);\n  } // Now logout all the servers\n\n\n  var servers = this.connectedProxies.slice(0);\n  var count = servers.length;\n  if (count == 0) return callback();\n  var errors = [];\n\n  function logoutServer(_server, cb) {\n    _server.logout(dbName, function (err) {\n      if (err) errors.push({\n        name: _server.name,\n        err: err\n      });\n      cb();\n    });\n  } // Execute logout on all server instances\n\n\n  for (i = 0; i < servers.length; i++) {\n    logoutServer(servers[i], function () {\n      count = count - 1;\n\n      if (count == 0) {\n        // Do not block new operations\n        self.authenticating = false; // If we have one or more errors\n\n        if (errors.length) return callback(MongoError.create({\n          message: f('logout failed against db %s', dbName),\n          errors: errors\n        }), false); // No errors\n\n        callback();\n      }\n    });\n  }\n};\n/**\n * Get server\n * @method\n * @return {Server}\n */\n\n\nMongos.prototype.getServer = function () {\n  var server = pickProxy(this);\n  if (this.s.debug) this.emit('pickedServer', null, server);\n  return server;\n};\n/**\n * Get a direct connection\n * @method\n * @return {Connection}\n */\n\n\nMongos.prototype.getConnection = function () {\n  var server = this.getServer();\n  if (server) return server.getConnection();\n};\n/**\n * All raw connections\n * @method\n * @return {Connection[]}\n */\n\n\nMongos.prototype.connections = function () {\n  var connections = [];\n\n  for (var i = 0; i < this.connectedProxies.length; i++) {\n    connections = connections.concat(this.connectedProxies[i].connections());\n  }\n\n  return connections;\n};\n\nfunction emitTopologyDescriptionChanged(self) {\n  if (self.listeners('topologyDescriptionChanged').length > 0) {\n    var topology = 'Unknown';\n    var setName = self.setName;\n\n    if (self.connectedProxies.length > 0) {\n      topology = 'Sharded';\n    } // Generate description\n\n\n    var description = {\n      topologyType: topology,\n      servers: [] // All proxies\n\n    };\n    var proxies = self.disconnectedProxies.concat(self.connectingProxies); // Add all the disconnected proxies\n\n    description.servers = description.servers.concat(proxies.map(function (x) {\n      var description = x.getDescription();\n      description.type = 'Unknown';\n      return description;\n    })); // Add all the connected proxies\n\n    description.servers = description.servers.concat(self.connectedProxies.map(function (x) {\n      var description = x.getDescription();\n      description.type = 'Mongos';\n      return description;\n    })); // Get the diff\n\n    var diffResult = diff(self.topologyDescription, description); // Create the result\n\n    var result = {\n      topologyId: self.id,\n      previousDescription: self.topologyDescription,\n      newDescription: description,\n      diff: diffResult\n    }; // Emit the topologyDescription change\n\n    if (diffResult.servers.length > 0) {\n      self.emit('topologyDescriptionChanged', result);\n    } // Set the new description\n\n\n    self.topologyDescription = description;\n  }\n}\n/**\n * A mongos connect event, used to verify that the connection is up and running\n *\n * @event Mongos#connect\n * @type {Mongos}\n */\n\n/**\n * A mongos reconnect event, used to verify that the mongos topology has reconnected\n *\n * @event Mongos#reconnect\n * @type {Mongos}\n */\n\n/**\n * A mongos fullsetup event, used to signal that all topology members have been contacted.\n *\n * @event Mongos#fullsetup\n * @type {Mongos}\n */\n\n/**\n * A mongos all event, used to signal that all topology members have been contacted.\n *\n * @event Mongos#all\n * @type {Mongos}\n */\n\n/**\n * A server member left the mongos list\n *\n * @event Mongos#left\n * @type {Mongos}\n * @param {string} type The type of member that left (mongos)\n * @param {Server} server The server object that left\n */\n\n/**\n * A server member joined the mongos list\n *\n * @event Mongos#joined\n * @type {Mongos}\n * @param {string} type The type of member that left (mongos)\n * @param {Server} server The server object that joined\n */\n\n/**\n * A server opening SDAM monitoring event\n *\n * @event Mongos#serverOpening\n * @type {object}\n */\n\n/**\n * A server closed SDAM monitoring event\n *\n * @event Mongos#serverClosed\n * @type {object}\n */\n\n/**\n * A server description SDAM change monitoring event\n *\n * @event Mongos#serverDescriptionChanged\n * @type {object}\n */\n\n/**\n * A topology open SDAM event\n *\n * @event Mongos#topologyOpening\n * @type {object}\n */\n\n/**\n * A topology closed SDAM event\n *\n * @event Mongos#topologyClosed\n * @type {object}\n */\n\n/**\n * A topology structure SDAM change event\n *\n * @event Mongos#topologyDescriptionChanged\n * @type {object}\n */\n\n/**\n * A topology serverHeartbeatStarted SDAM event\n *\n * @event Mongos#serverHeartbeatStarted\n * @type {object}\n */\n\n/**\n * A topology serverHeartbeatFailed SDAM event\n *\n * @event Mongos#serverHeartbeatFailed\n * @type {object}\n */\n\n/**\n * A topology serverHeartbeatSucceeded SDAM change event\n *\n * @event Mongos#serverHeartbeatSucceeded\n * @type {object}\n */\n\n\nmodule.exports = Mongos;","map":null,"metadata":{},"sourceType":"script"}