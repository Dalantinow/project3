{"ast":null,"code":"\"use strict\";\n\nvar EventEmitter = require('events').EventEmitter,\n    inherits = require('util').inherits,\n    f = require('util').format,\n    Server = require('./server'),\n    Cursor = require('./cursor'),\n    AggregationCursor = require('./aggregation_cursor'),\n    CommandCursor = require('./command_cursor'),\n    ReadPreference = require('./read_preference'),\n    MongoError = require('mongodb-core').MongoError,\n    ServerCapabilities = require('./topology_base').ServerCapabilities,\n    Store = require('./topology_base').Store,\n    Define = require('./metadata'),\n    CReplSet = require('mongodb-core').ReplSet,\n    CoreReadPreference = require('mongodb-core').ReadPreference,\n    MAX_JS_INT = require('./utils').MAX_JS_INT,\n    translateOptions = require('./utils').translateOptions,\n    filterOptions = require('./utils').filterOptions,\n    getReadPreference = require('./utils').getReadPreference,\n    mergeOptions = require('./utils').mergeOptions,\n    os = require('os');\n/**\n * @fileOverview The **ReplSet** class is a class that represents a Replicaset topology and is\n * used to construct connections.\n *\n * **ReplSet Should not be used, use MongoClient.connect**\n * @example\n * var Db = require('mongodb').Db,\n *   ReplSet = require('mongodb').ReplSet,\n *   Server = require('mongodb').Server,\n *   test = require('assert');\n * // Connect using ReplSet\n * var server = new Server('localhost', 27017);\n * var db = new Db('test', new ReplSet([server]));\n * db.open(function(err, db) {\n *   // Get an additional db\n *   db.close();\n * });\n */\n// Allowed parameters\n\n\nvar legalOptionNames = ['ha', 'haInterval', 'replicaSet', 'rs_name', 'secondaryAcceptableLatencyMS', 'connectWithNoPrimary', 'poolSize', 'ssl', 'checkServerIdentity', 'sslValidate', 'sslCA', 'sslCert', 'sslCRL', 'sslKey', 'sslPass', 'socketOptions', 'bufferMaxEntries', 'store', 'auto_reconnect', 'autoReconnect', 'emitError', 'keepAlive', 'noDelay', 'connectTimeoutMS', 'socketTimeoutMS', 'strategy', 'debug', 'family', 'loggerLevel', 'logger', 'reconnectTries', 'appname', 'domainsEnabled', 'servername', 'promoteLongs', 'promoteValues', 'promoteBuffers', 'maxStalenessSeconds']; // Get package.json variable\n\nvar driverVersion = require('../package.json').version;\n\nvar nodejsversion = f('Node.js %s, %s', process.version, os.endianness());\nvar type = os.type();\nvar name = process.platform;\nvar architecture = process.arch;\nvar release = os.release();\n/**\n * Creates a new ReplSet instance\n * @class\n * @deprecated\n * @param {Server[]} servers A seedlist of servers participating in the replicaset.\n * @param {object} [options=null] Optional settings.\n * @param {boolean} [options.ha=true] Turn on high availability monitoring.\n * @param {number} [options.haInterval=10000] Time between each replicaset status check.\n * @param {string} [options.replicaSet] The name of the replicaset to connect to.\n * @param {number} [options.secondaryAcceptableLatencyMS=15] Sets the range of servers to pick when using NEAREST (lowest ping ms + the latency fence, ex: range of 1 to (1 + 15) ms)\n * @param {boolean} [options.connectWithNoPrimary=false] Sets if the driver should connect even if no primary is available\n * @param {number} [options.poolSize=5] Number of connections in the connection pool for each server instance, set to 5 as default for legacy reasons.\n * @param {boolean} [options.ssl=false] Use ssl connection (needs to have a mongod server with ssl support)\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {object} [options.sslValidate=true] Validate mongod server certificate against ca (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {array} [options.sslCA=null] Array of valid certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {array} [options.sslCRL=null] Array of revocation certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {(Buffer|string)} [options.sslCert=null] String or buffer containing the certificate we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {(Buffer|string)} [options.sslKey=null] String or buffer containing the certificate private key we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {(Buffer|string)} [options.sslPass=null] String or buffer containing the certificate password (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {string} [options.servername=null] String containing the server name requested via TLS SNI.\n * @param {object} [options.socketOptions=null] Socket options\n * @param {boolean} [options.socketOptions.noDelay=true] TCP Socket NoDelay option.\n * @param {number} [options.socketOptions.keepAlive=0] TCP KeepAlive on the socket with a X ms delay before start.\n * @param {number} [options.socketOptions.connectTimeoutMS=10000] TCP Connection timeout setting\n * @param {number} [options.socketOptions.socketTimeoutMS=0] TCP Socket timeout setting\n * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit.\n * @param {number} [options.maxStalenessSeconds=undefined] The max staleness to secondary reads (values under 10 seconds cannot be guaranteed);\n * @fires ReplSet#connect\n * @fires ReplSet#ha\n * @fires ReplSet#joined\n * @fires ReplSet#left\n * @fires ReplSet#fullsetup\n * @fires ReplSet#open\n * @fires ReplSet#close\n * @fires ReplSet#error\n * @fires ReplSet#timeout\n * @fires ReplSet#parseError\n * @property {string} parserType the parser type used (c++ or js).\n * @return {ReplSet} a ReplSet instance.\n */\n\nvar ReplSet = function (servers, options) {\n  if (!(this instanceof ReplSet)) return new ReplSet(servers, options);\n  options = options || {};\n  var self = this; // Set up event emitter\n\n  EventEmitter.call(this); // Filter the options\n\n  options = filterOptions(options, legalOptionNames); // Ensure all the instances are Server\n\n  for (var i = 0; i < servers.length; i++) {\n    if (!(servers[i] instanceof Server)) {\n      throw MongoError.create({\n        message: \"all seed list instances must be of the Server type\",\n        driver: true\n      });\n    }\n  } // Stored options\n\n\n  var storeOptions = {\n    force: false,\n    bufferMaxEntries: typeof options.bufferMaxEntries == 'number' ? options.bufferMaxEntries : MAX_JS_INT // Shared global store\n\n  };\n  var store = options.store || new Store(self, storeOptions); // Build seed list\n\n  var seedlist = servers.map(function (x) {\n    return {\n      host: x.host,\n      port: x.port\n    };\n  }); // Clone options\n\n  var clonedOptions = mergeOptions({}, {\n    disconnectHandler: store,\n    cursorFactory: Cursor,\n    reconnect: false,\n    emitError: typeof options.emitError == 'boolean' ? options.emitError : true,\n    size: typeof options.poolSize == 'number' ? options.poolSize : 5\n  }); // Translate any SSL options and other connectivity options\n\n  clonedOptions = translateOptions(clonedOptions, options); // Socket options\n\n  var socketOptions = options.socketOptions && Object.keys(options.socketOptions).length > 0 ? options.socketOptions : options; // Translate all the options to the mongodb-core ones\n\n  clonedOptions = translateOptions(clonedOptions, socketOptions);\n\n  if (typeof clonedOptions.keepAlive == 'number') {\n    clonedOptions.keepAliveInitialDelay = clonedOptions.keepAlive;\n    clonedOptions.keepAlive = clonedOptions.keepAlive > 0;\n  } // Client info\n\n\n  this.clientInfo = {\n    driver: {\n      name: \"nodejs\",\n      version: driverVersion\n    },\n    os: {\n      type: type,\n      name: name,\n      architecture: architecture,\n      version: release\n    },\n    platform: nodejsversion // Build default client information\n\n  };\n  clonedOptions.clientInfo = this.clientInfo; // Do we have an application specific string\n\n  if (options.appname) {\n    clonedOptions.clientInfo.application = {\n      name: options.appname\n    };\n  } // Create the ReplSet\n\n\n  var replset = new CReplSet(seedlist, clonedOptions); // Listen to reconnect event\n\n  replset.on('reconnect', function () {\n    self.emit('reconnect');\n    store.execute();\n  }); // Internal state\n\n  this.s = {\n    // Replicaset\n    replset: replset // Server capabilities\n    ,\n    sCapabilities: null // Debug tag\n    ,\n    tag: options.tag // Store options\n    ,\n    storeOptions: storeOptions // Cloned options\n    ,\n    clonedOptions: clonedOptions // Store\n    ,\n    store: store // Options\n    ,\n    options: options // Debug\n\n  };\n\n  if (clonedOptions.debug) {\n    // Last ismaster\n    Object.defineProperty(this, 'replset', {\n      enumerable: true,\n      get: function () {\n        return replset;\n      }\n    });\n  }\n};\n/**\n * @ignore\n */\n\n\ninherits(ReplSet, EventEmitter); // Last ismaster\n\nObject.defineProperty(ReplSet.prototype, 'isMasterDoc', {\n  enumerable: true,\n  get: function () {\n    return this.s.replset.lastIsMaster();\n  }\n});\nObject.defineProperty(ReplSet.prototype, 'parserType', {\n  enumerable: true,\n  get: function () {\n    return this.s.replset.parserType;\n  }\n}); // BSON property\n\nObject.defineProperty(ReplSet.prototype, 'bson', {\n  enumerable: true,\n  get: function () {\n    return this.s.replset.s.bson;\n  }\n});\nObject.defineProperty(ReplSet.prototype, 'haInterval', {\n  enumerable: true,\n  get: function () {\n    return this.s.replset.s.haInterval;\n  }\n});\nvar define = ReplSet.define = new Define('ReplSet', ReplSet, false); // Ensure the right read Preference object\n\nvar translateReadPreference = function (options) {\n  if (typeof options.readPreference == 'string') {\n    options.readPreference = new CoreReadPreference(options.readPreference);\n  } else if (options.readPreference instanceof ReadPreference) {\n    options.readPreference = new CoreReadPreference(options.readPreference.mode, options.readPreference.tags, {\n      maxStalenessSeconds: options.readPreference.maxStalenessSeconds\n    });\n  }\n\n  return options;\n}; // Connect method\n\n\nReplSet.prototype.connect = function (db, _options, callback) {\n  var self = this;\n  if ('function' === typeof _options) callback = _options, _options = {};\n  if (_options == null) _options = {};\n  if (!('function' === typeof callback)) callback = null;\n  self.s.options = _options; // Update bufferMaxEntries\n\n  self.s.storeOptions.bufferMaxEntries = db.bufferMaxEntries; // Actual handler\n\n  var errorHandler = function (event) {\n    return function (err) {\n      if (event != 'error') {\n        self.emit(event, err);\n      }\n    };\n  }; // Clear out all the current handlers left over\n\n\n  var events = [\"timeout\", \"error\", \"close\", 'serverOpening', 'serverDescriptionChanged', 'serverHeartbeatStarted', 'serverHeartbeatSucceeded', 'serverHeartbeatFailed', 'serverClosed', 'topologyOpening', 'topologyClosed', 'topologyDescriptionChanged', 'joined', 'left', 'ping', 'ha'];\n  events.forEach(function (e) {\n    self.s.replset.removeAllListeners(e);\n  }); // relay the event\n\n  var relay = function (event) {\n    return function (t, server) {\n      self.emit(event, t, server);\n    };\n  }; // Replset events relay\n\n\n  var replsetRelay = function (event) {\n    return function (t, server) {\n      self.emit(event, t, server.lastIsMaster(), server);\n    };\n  }; // Relay ha\n\n\n  var relayHa = function (t, state) {\n    self.emit('ha', t, state);\n\n    if (t == 'start') {\n      self.emit('ha_connect', t, state);\n    } else if (t == 'end') {\n      self.emit('ha_ismaster', t, state);\n    }\n  }; // Set up serverConfig listeners\n\n\n  self.s.replset.on('joined', replsetRelay('joined'));\n  self.s.replset.on('left', relay('left'));\n  self.s.replset.on('ping', relay('ping'));\n  self.s.replset.on('ha', relayHa); // Set up SDAM listeners\n\n  self.s.replset.on('serverDescriptionChanged', relay('serverDescriptionChanged'));\n  self.s.replset.on('serverHeartbeatStarted', relay('serverHeartbeatStarted'));\n  self.s.replset.on('serverHeartbeatSucceeded', relay('serverHeartbeatSucceeded'));\n  self.s.replset.on('serverHeartbeatFailed', relay('serverHeartbeatFailed'));\n  self.s.replset.on('serverOpening', relay('serverOpening'));\n  self.s.replset.on('serverClosed', relay('serverClosed'));\n  self.s.replset.on('topologyOpening', relay('topologyOpening'));\n  self.s.replset.on('topologyClosed', relay('topologyClosed'));\n  self.s.replset.on('topologyDescriptionChanged', relay('topologyDescriptionChanged'));\n  self.s.replset.on('fullsetup', function () {\n    self.emit('fullsetup', self, self);\n  });\n  self.s.replset.on('all', function () {\n    self.emit('all', null, self);\n  }); // Connect handler\n\n  var connectHandler = function () {\n    // Set up listeners\n    self.s.replset.once('timeout', errorHandler('timeout'));\n    self.s.replset.once('error', errorHandler('error'));\n    self.s.replset.once('close', errorHandler('close')); // Emit open event\n\n    self.emit('open', null, self); // Return correctly\n\n    try {\n      callback(null, self);\n    } catch (err) {\n      process.nextTick(function () {\n        throw err;\n      });\n    }\n  }; // Error handler\n\n\n  var connectErrorHandler = function () {\n    return function (err) {\n      ['timeout', 'error', 'close'].forEach(function (e) {\n        self.s.replset.removeListener(e, connectErrorHandler);\n      });\n      self.s.replset.removeListener('connect', connectErrorHandler); // Destroy the replset\n\n      self.s.replset.destroy(); // Try to callback\n\n      try {\n        callback(err);\n      } catch (err) {\n        if (!self.s.replset.isConnected()) process.nextTick(function () {\n          throw err;\n        });\n      }\n    };\n  }; // Set up listeners\n\n\n  self.s.replset.once('timeout', connectErrorHandler('timeout'));\n  self.s.replset.once('error', connectErrorHandler('error'));\n  self.s.replset.once('close', connectErrorHandler('close'));\n  self.s.replset.once('connect', connectHandler); // Start connection\n\n  self.s.replset.connect(_options);\n}; // Server capabilities\n\n\nReplSet.prototype.capabilities = function () {\n  if (this.s.sCapabilities) return this.s.sCapabilities;\n  if (this.s.replset.lastIsMaster() == null) return null;\n  this.s.sCapabilities = new ServerCapabilities(this.s.replset.lastIsMaster());\n  return this.s.sCapabilities;\n};\n\ndefine.classMethod('capabilities', {\n  callback: false,\n  promise: false,\n  returns: [ServerCapabilities]\n}); // Command\n\nReplSet.prototype.command = function (ns, cmd, options, callback) {\n  this.s.replset.command(ns, cmd, getReadPreference(options), callback);\n};\n\ndefine.classMethod('command', {\n  callback: true,\n  promise: false\n}); // Insert\n\nReplSet.prototype.insert = function (ns, ops, options, callback) {\n  this.s.replset.insert(ns, ops, options, callback);\n};\n\ndefine.classMethod('insert', {\n  callback: true,\n  promise: false\n}); // Update\n\nReplSet.prototype.update = function (ns, ops, options, callback) {\n  this.s.replset.update(ns, ops, options, callback);\n};\n\ndefine.classMethod('update', {\n  callback: true,\n  promise: false\n}); // Remove\n\nReplSet.prototype.remove = function (ns, ops, options, callback) {\n  this.s.replset.remove(ns, ops, options, callback);\n};\n\ndefine.classMethod('remove', {\n  callback: true,\n  promise: false\n}); // Destroyed\n\nReplSet.prototype.isDestroyed = function () {\n  return this.s.replset.isDestroyed();\n}; // IsConnected\n\n\nReplSet.prototype.isConnected = function (options) {\n  options = options || {}; // If we passed in a readPreference, translate to\n  // a CoreReadPreference instance\n\n  if (options.readPreference) {\n    options.readPreference = translateReadPreference(options.readPreference);\n  }\n\n  return this.s.replset.isConnected(options);\n};\n\ndefine.classMethod('isConnected', {\n  callback: false,\n  promise: false,\n  returns: [Boolean]\n}); // Insert\n\nReplSet.prototype.cursor = function (ns, cmd, options) {\n  options = translateReadPreference(options);\n  options.disconnectHandler = this.s.store;\n  return this.s.replset.cursor(ns, cmd, options);\n};\n\ndefine.classMethod('cursor', {\n  callback: false,\n  promise: false,\n  returns: [Cursor, AggregationCursor, CommandCursor]\n});\n\nReplSet.prototype.lastIsMaster = function () {\n  return this.s.replset.lastIsMaster();\n};\n/**\n * Unref all sockets\n * @method\n */\n\n\nReplSet.prototype.unref = function () {\n  return this.s.replset.unref();\n};\n\nReplSet.prototype.close = function (forceClosed) {\n  var self = this; // Call destroy on the topology\n\n  this.s.replset.destroy({\n    force: typeof forceClosed == 'boolean' ? forceClosed : false\n  }); // We need to wash out all stored processes\n\n  if (forceClosed == true) {\n    this.s.storeOptions.force = forceClosed;\n    this.s.store.flush();\n  }\n\n  var events = ['timeout', 'error', 'close', 'joined', 'left'];\n  events.forEach(function (e) {\n    self.removeAllListeners(e);\n  });\n};\n\ndefine.classMethod('close', {\n  callback: false,\n  promise: false\n});\n\nReplSet.prototype.auth = function () {\n  var args = Array.prototype.slice.call(arguments, 0);\n  this.s.replset.auth.apply(this.s.replset, args);\n};\n\ndefine.classMethod('auth', {\n  callback: true,\n  promise: false\n});\n\nReplSet.prototype.logout = function () {\n  var args = Array.prototype.slice.call(arguments, 0);\n  this.s.replset.logout.apply(this.s.replset, args);\n};\n\ndefine.classMethod('logout', {\n  callback: true,\n  promise: false\n});\n/**\n * All raw connections\n * @method\n * @return {array}\n */\n\nReplSet.prototype.connections = function () {\n  return this.s.replset.connections();\n};\n\ndefine.classMethod('connections', {\n  callback: false,\n  promise: false,\n  returns: [Array]\n});\n/**\n * A replset connect event, used to verify that the connection is up and running\n *\n * @event ReplSet#connect\n * @type {ReplSet}\n */\n\n/**\n * The replset high availability event\n *\n * @event ReplSet#ha\n * @type {function}\n * @param {string} type The stage in the high availability event (start|end)\n * @param {boolean} data.norepeat This is a repeating high availability process or a single execution only\n * @param {number} data.id The id for this high availability request\n * @param {object} data.state An object containing the information about the current replicaset\n */\n\n/**\n * A server member left the replicaset\n *\n * @event ReplSet#left\n * @type {function}\n * @param {string} type The type of member that left (primary|secondary|arbiter)\n * @param {Server} server The server object that left\n */\n\n/**\n * A server member joined the replicaset\n *\n * @event ReplSet#joined\n * @type {function}\n * @param {string} type The type of member that joined (primary|secondary|arbiter)\n * @param {Server} server The server object that joined\n */\n\n/**\n * ReplSet open event, emitted when replicaset can start processing commands.\n *\n * @event ReplSet#open\n * @type {Replset}\n */\n\n/**\n * ReplSet fullsetup event, emitted when all servers in the topology have been connected to.\n *\n * @event ReplSet#fullsetup\n * @type {Replset}\n */\n\n/**\n * ReplSet close event\n *\n * @event ReplSet#close\n * @type {object}\n */\n\n/**\n * ReplSet error event, emitted if there is an error listener.\n *\n * @event ReplSet#error\n * @type {MongoError}\n */\n\n/**\n * ReplSet timeout event\n *\n * @event ReplSet#timeout\n * @type {object}\n */\n\n/**\n * ReplSet parseError event\n *\n * @event ReplSet#parseError\n * @type {object}\n */\n\nmodule.exports = ReplSet;","map":null,"metadata":{},"sourceType":"script"}