{"ast":null,"code":"\"use strict\";\n\nvar common = require('./common'),\n    utils = require('../utils'),\n    toError = require('../utils').toError,\n    handleCallback = require('../utils').handleCallback,\n    shallowClone = utils.shallowClone,\n    BulkWriteResult = common.BulkWriteResult,\n    ObjectID = require('mongodb-core').BSON.ObjectID,\n    Define = require('../metadata'),\n    BSON = require('mongodb-core').BSON,\n    Batch = common.Batch,\n    mergeBatchResults = common.mergeBatchResults;\n\nvar bson = new BSON([BSON.Binary, BSON.Code, BSON.DBRef, BSON.Decimal128, BSON.Double, BSON.Int32, BSON.Long, BSON.Map, BSON.MaxKey, BSON.MinKey, BSON.ObjectId, BSON.BSONRegExp, BSON.Symbol, BSON.Timestamp]);\n/**\n * Create a FindOperatorsOrdered instance (INTERNAL TYPE, do not instantiate directly)\n * @class\n * @return {FindOperatorsOrdered} a FindOperatorsOrdered instance.\n */\n\nvar FindOperatorsOrdered = function (self) {\n  this.s = self.s;\n};\n/**\n * Add a single update document to the bulk operation\n *\n * @method\n * @param {object} doc update operations\n * @throws {MongoError}\n * @return {OrderedBulkOperation}\n */\n\n\nFindOperatorsOrdered.prototype.update = function (updateDocument) {\n  // Perform upsert\n  var upsert = typeof this.s.currentOp.upsert == 'boolean' ? this.s.currentOp.upsert : false; // Establish the update command\n\n  var document = {\n    q: this.s.currentOp.selector,\n    u: updateDocument,\n    multi: true,\n    upsert: upsert // Clear out current Op\n\n  };\n  this.s.currentOp = null; // Add the update document to the list\n\n  return addToOperationsList(this, common.UPDATE, document);\n};\n/**\n * Add a single update one document to the bulk operation\n *\n * @method\n * @param {object} doc update operations\n * @throws {MongoError}\n * @return {OrderedBulkOperation}\n */\n\n\nFindOperatorsOrdered.prototype.updateOne = function (updateDocument) {\n  // Perform upsert\n  var upsert = typeof this.s.currentOp.upsert == 'boolean' ? this.s.currentOp.upsert : false; // Establish the update command\n\n  var document = {\n    q: this.s.currentOp.selector,\n    u: updateDocument,\n    multi: false,\n    upsert: upsert // Clear out current Op\n\n  };\n  this.s.currentOp = null; // Add the update document to the list\n\n  return addToOperationsList(this, common.UPDATE, document);\n};\n/**\n * Add a replace one operation to the bulk operation\n *\n * @method\n * @param {object} doc the new document to replace the existing one with\n * @throws {MongoError}\n * @return {OrderedBulkOperation}\n */\n\n\nFindOperatorsOrdered.prototype.replaceOne = function (updateDocument) {\n  this.updateOne(updateDocument);\n};\n/**\n * Upsert modifier for update bulk operation\n *\n * @method\n * @throws {MongoError}\n * @return {FindOperatorsOrdered}\n */\n\n\nFindOperatorsOrdered.prototype.upsert = function () {\n  this.s.currentOp.upsert = true;\n  return this;\n};\n/**\n * Add a remove one operation to the bulk operation\n *\n * @method\n * @throws {MongoError}\n * @return {OrderedBulkOperation}\n */\n\n\nFindOperatorsOrdered.prototype.deleteOne = function () {\n  // Establish the update command\n  var document = {\n    q: this.s.currentOp.selector,\n    limit: 1 // Clear out current Op\n\n  };\n  this.s.currentOp = null; // Add the remove document to the list\n\n  return addToOperationsList(this, common.REMOVE, document);\n}; // Backward compatibility\n\n\nFindOperatorsOrdered.prototype.removeOne = FindOperatorsOrdered.prototype.deleteOne;\n/**\n * Add a remove operation to the bulk operation\n *\n * @method\n * @throws {MongoError}\n * @return {OrderedBulkOperation}\n */\n\nFindOperatorsOrdered.prototype.delete = function () {\n  // Establish the update command\n  var document = {\n    q: this.s.currentOp.selector,\n    limit: 0 // Clear out current Op\n\n  };\n  this.s.currentOp = null; // Add the remove document to the list\n\n  return addToOperationsList(this, common.REMOVE, document);\n}; // Backward compatibility\n\n\nFindOperatorsOrdered.prototype.remove = FindOperatorsOrdered.prototype.delete; // Add to internal list of documents\n\nvar addToOperationsList = function (_self, docType, document) {\n  // Get the bsonSize\n  var bsonSize = bson.calculateObjectSize(document, {\n    checkKeys: false\n  }); // Throw error if the doc is bigger than the max BSON size\n\n  if (bsonSize >= _self.s.maxBatchSizeBytes) {\n    throw toError(\"document is larger than the maximum size \" + _self.s.maxBatchSizeBytes);\n  } // Create a new batch object if we don't have a current one\n\n\n  if (_self.s.currentBatch == null) _self.s.currentBatch = new Batch(docType, _self.s.currentIndex); // Check if we need to create a new batch\n\n  if (_self.s.currentBatchSize + 1 >= _self.s.maxWriteBatchSize || _self.s.currentBatchSizeBytes + _self.s.currentBatchSizeBytes >= _self.s.maxBatchSizeBytes || _self.s.currentBatch.batchType != docType) {\n    // Save the batch to the execution stack\n    _self.s.batches.push(_self.s.currentBatch); // Create a new batch\n\n\n    _self.s.currentBatch = new Batch(docType, _self.s.currentIndex); // Reset the current size trackers\n\n    _self.s.currentBatchSize = 0;\n    _self.s.currentBatchSizeBytes = 0;\n  } else {\n    // Update current batch size\n    _self.s.currentBatchSize = _self.s.currentBatchSize + 1;\n    _self.s.currentBatchSizeBytes = _self.s.currentBatchSizeBytes + bsonSize;\n  }\n\n  if (docType == common.INSERT) {\n    _self.s.bulkResult.insertedIds.push({\n      index: _self.s.currentIndex,\n      _id: document._id\n    });\n  } // We have an array of documents\n\n\n  if (Array.isArray(document)) {\n    throw toError(\"operation passed in cannot be an Array\");\n  } else {\n    _self.s.currentBatch.originalIndexes.push(_self.s.currentIndex);\n\n    _self.s.currentBatch.operations.push(document);\n\n    _self.s.currentBatchSizeBytes = _self.s.currentBatchSizeBytes + bsonSize;\n    _self.s.currentIndex = _self.s.currentIndex + 1;\n  } // Return self\n\n\n  return _self;\n};\n/**\n * Create a new OrderedBulkOperation instance (INTERNAL TYPE, do not instantiate directly)\n * @class\n * @property {number} length Get the number of operations in the bulk.\n * @return {OrderedBulkOperation} a OrderedBulkOperation instance.\n */\n\n\nfunction OrderedBulkOperation(topology, collection, options) {\n  options = options == null ? {} : options; // TODO Bring from driver information in isMaster\n\n  var executed = false; // Current item\n\n  var currentOp = null; // Handle to the bson serializer, used to calculate running sizes\n\n  var bson = topology.bson; // Namespace for the operation\n\n  var namespace = collection.collectionName; // Set max byte size\n\n  var maxBatchSizeBytes = topology.isMasterDoc && topology.isMasterDoc.maxBsonObjectSize ? topology.isMasterDoc.maxBsonObjectSize : 1024 * 1025 * 16;\n  var maxWriteBatchSize = topology.isMasterDoc && topology.isMasterDoc.maxWriteBatchSize ? topology.isMasterDoc.maxWriteBatchSize : 1000; // Get the write concern\n\n  var writeConcern = common.writeConcern(shallowClone(options), collection, options); // Get the promiseLibrary\n\n  var promiseLibrary = options.promiseLibrary; // No promise library selected fall back\n\n  if (!promiseLibrary) {\n    promiseLibrary = typeof global.Promise == 'function' ? global.Promise : require('es6-promise').Promise;\n  } // Final results\n\n\n  var bulkResult = {\n    ok: 1,\n    writeErrors: [],\n    writeConcernErrors: [],\n    insertedIds: [],\n    nInserted: 0,\n    nUpserted: 0,\n    nMatched: 0,\n    nModified: 0,\n    nRemoved: 0,\n    upserted: []\n  }; // Internal state\n\n  this.s = {\n    // Final result\n    bulkResult: bulkResult // Current batch state\n    ,\n    currentBatch: null,\n    currentIndex: 0,\n    currentBatchSize: 0,\n    currentBatchSizeBytes: 0,\n    batches: [] // Write concern\n    ,\n    writeConcern: writeConcern // Max batch size options\n    ,\n    maxBatchSizeBytes: maxBatchSizeBytes,\n    maxWriteBatchSize: maxWriteBatchSize // Namespace\n    ,\n    namespace: namespace // BSON\n    ,\n    bson: bson // Topology\n    ,\n    topology: topology // Options\n    ,\n    options: options // Current operation\n    ,\n    currentOp: currentOp // Executed\n    ,\n    executed: executed // Collection\n    ,\n    collection: collection // Promise Library\n    ,\n    promiseLibrary: promiseLibrary // Fundamental error\n    ,\n    err: null // Bypass validation\n    ,\n    bypassDocumentValidation: typeof options.bypassDocumentValidation == 'boolean' ? options.bypassDocumentValidation : false\n  };\n}\n\nvar define = OrderedBulkOperation.define = new Define('OrderedBulkOperation', OrderedBulkOperation, false);\n\nOrderedBulkOperation.prototype.raw = function (op) {\n  var key = Object.keys(op)[0]; // Set up the force server object id\n\n  var forceServerObjectId = typeof this.s.options.forceServerObjectId == 'boolean' ? this.s.options.forceServerObjectId : this.s.collection.s.db.options.forceServerObjectId; // Update operations\n\n  if (op.updateOne && op.updateOne.q || op.updateMany && op.updateMany.q || op.replaceOne && op.replaceOne.q) {\n    op[key].multi = op.updateOne || op.replaceOne ? false : true;\n    return addToOperationsList(this, common.UPDATE, op[key]);\n  } // Crud spec update format\n\n\n  if (op.updateOne || op.updateMany || op.replaceOne) {\n    var multi = op.updateOne || op.replaceOne ? false : true;\n    var operation = {\n      q: op[key].filter,\n      u: op[key].update || op[key].replacement,\n      multi: multi\n    };\n    operation.upsert = op[key].upsert ? true : false;\n    if (op.collation) operation.collation = op.collation;\n    return addToOperationsList(this, common.UPDATE, operation);\n  } // Remove operations\n\n\n  if (op.removeOne || op.removeMany || op.deleteOne && op.deleteOne.q || op.deleteMany && op.deleteMany.q) {\n    op[key].limit = op.removeOne ? 1 : 0;\n    return addToOperationsList(this, common.REMOVE, op[key]);\n  } // Crud spec delete operations, less efficient\n\n\n  if (op.deleteOne || op.deleteMany) {\n    var limit = op.deleteOne ? 1 : 0;\n    operation = {\n      q: op[key].filter,\n      limit: limit\n    };\n    if (op.collation) operation.collation = op.collation;\n    return addToOperationsList(this, common.REMOVE, operation);\n  } // Insert operations\n\n\n  if (op.insertOne && op.insertOne.document == null) {\n    if (forceServerObjectId !== true && op.insertOne._id == null) op.insertOne._id = new ObjectID();\n    return addToOperationsList(this, common.INSERT, op.insertOne);\n  } else if (op.insertOne && op.insertOne.document) {\n    if (forceServerObjectId !== true && op.insertOne.document._id == null) op.insertOne.document._id = new ObjectID();\n    return addToOperationsList(this, common.INSERT, op.insertOne.document);\n  }\n\n  if (op.insertMany) {\n    for (var i = 0; i < op.insertMany.length; i++) {\n      if (forceServerObjectId !== true && op.insertMany[i]._id == null) op.insertMany[i]._id = new ObjectID();\n      addToOperationsList(this, common.INSERT, op.insertMany[i]);\n    }\n\n    return;\n  } // No valid type of operation\n\n\n  throw toError(\"bulkWrite only supports insertOne, insertMany, updateOne, updateMany, removeOne, removeMany, deleteOne, deleteMany\");\n};\n/**\n * Add a single insert document to the bulk operation\n *\n * @param {object} doc the document to insert\n * @throws {MongoError}\n * @return {OrderedBulkOperation}\n */\n\n\nOrderedBulkOperation.prototype.insert = function (document) {\n  if (this.s.collection.s.db.options.forceServerObjectId !== true && document._id == null) document._id = new ObjectID();\n  return addToOperationsList(this, common.INSERT, document);\n};\n/**\n * Initiate a find operation for an update/updateOne/remove/removeOne/replaceOne\n *\n * @method\n * @param {object} selector The selector for the bulk operation.\n * @throws {MongoError}\n * @return {FindOperatorsOrdered}\n */\n\n\nOrderedBulkOperation.prototype.find = function (selector) {\n  if (!selector) {\n    throw toError(\"Bulk find operation must specify a selector\");\n  } // Save a current selector\n\n\n  this.s.currentOp = {\n    selector: selector\n  };\n  return new FindOperatorsOrdered(this);\n};\n\nObject.defineProperty(OrderedBulkOperation.prototype, 'length', {\n  enumerable: true,\n  get: function () {\n    return this.s.currentIndex;\n  }\n}); //\n// Execute next write command in a chain\n\nvar executeCommands = function (self, callback) {\n  if (self.s.batches.length == 0) {\n    return handleCallback(callback, null, new BulkWriteResult(self.s.bulkResult));\n  } // Ordered execution of the command\n\n\n  var batch = self.s.batches.shift();\n\n  var resultHandler = function (err, result) {\n    // Error is a driver related error not a bulk op error, terminate\n    if (err && err.driver || err && err.message) {\n      return handleCallback(callback, err);\n    } // If we have and error\n\n\n    if (err) err.ok = 0; // Merge the results together\n\n    var mergeResult = mergeBatchResults(true, batch, self.s.bulkResult, err, result);\n\n    if (mergeResult != null) {\n      return handleCallback(callback, null, new BulkWriteResult(self.s.bulkResult));\n    } // If we are ordered and have errors and they are\n    // not all replication errors terminate the operation\n\n\n    if (self.s.bulkResult.writeErrors.length > 0) {\n      return handleCallback(callback, toError(self.s.bulkResult.writeErrors[0]), new BulkWriteResult(self.s.bulkResult));\n    } // Execute the next command in line\n\n\n    executeCommands(self, callback);\n  };\n\n  var finalOptions = {\n    ordered: true\n  };\n\n  if (self.s.writeConcern != null) {\n    finalOptions.writeConcern = self.s.writeConcern;\n  } // Set an operationIf if provided\n\n\n  if (self.operationId) {\n    resultHandler.operationId = self.operationId;\n  } // Serialize functions\n\n\n  if (self.s.options.serializeFunctions) {\n    finalOptions.serializeFunctions = true;\n  } // Serialize functions\n\n\n  if (self.s.options.ignoreUndefined) {\n    finalOptions.ignoreUndefined = true;\n  } // Is the bypassDocumentValidation options specific\n\n\n  if (self.s.bypassDocumentValidation == true) {\n    finalOptions.bypassDocumentValidation = true;\n  }\n\n  try {\n    if (batch.batchType == common.INSERT) {\n      self.s.topology.insert(self.s.collection.namespace, batch.operations, finalOptions, resultHandler);\n    } else if (batch.batchType == common.UPDATE) {\n      self.s.topology.update(self.s.collection.namespace, batch.operations, finalOptions, resultHandler);\n    } else if (batch.batchType == common.REMOVE) {\n      self.s.topology.remove(self.s.collection.namespace, batch.operations, finalOptions, resultHandler);\n    }\n  } catch (err) {\n    // Force top level error\n    err.ok = 0; // Merge top level error and return\n\n    handleCallback(callback, null, mergeBatchResults(false, batch, self.s.bulkResult, err, null));\n  }\n};\n/**\n * The callback format for results\n * @callback OrderedBulkOperation~resultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {BulkWriteResult} result The bulk write result.\n */\n\n/**\n * Execute the ordered bulk operation\n *\n * @method\n * @param {object} [options=null] Optional settings.\n * @param {(number|string)} [options.w=null] The write concern.\n * @param {number} [options.wtimeout=null] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.fsync=false] Specify a file sync write concern.\n * @param {OrderedBulkOperation~resultCallback} [callback] The result callback\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\n\n\nOrderedBulkOperation.prototype.execute = function (_writeConcern, callback) {\n  var self = this;\n\n  if (this.s.executed) {\n    var executedError = toError('batch cannot be re-executed');\n    return typeof callback === 'function' ? callback(executedError, null) : this.s.promiseLibrary.reject(executedError);\n  }\n\n  if (typeof _writeConcern === 'function') {\n    callback = _writeConcern;\n  } else if (_writeConcern && typeof _writeConcern === 'object') {\n    this.s.writeConcern = _writeConcern;\n  } // If we have current batch\n\n\n  if (this.s.currentBatch) this.s.batches.push(this.s.currentBatch); // If we have no operations in the bulk raise an error\n\n  if (this.s.batches.length == 0) {\n    var emptyBatchError = toError('Invalid Operation, no operations specified');\n    return typeof callback === 'function' ? callback(emptyBatchError, null) : this.s.promiseLibrary.reject(emptyBatchError);\n  } // Execute using callback\n\n\n  if (typeof callback === 'function') {\n    return executeCommands(this, callback);\n  } // Return a Promise\n\n\n  return new this.s.promiseLibrary(function (resolve, reject) {\n    executeCommands(self, function (err, r) {\n      if (err) return reject(err);\n      resolve(r);\n    });\n  });\n};\n\ndefine.classMethod('execute', {\n  callback: true,\n  promise: false\n});\n/**\n * Returns an unordered batch object\n * @ignore\n */\n\nvar initializeOrderedBulkOp = function (topology, collection, options) {\n  return new OrderedBulkOperation(topology, collection, options);\n};\n\ninitializeOrderedBulkOp.OrderedBulkOperation = OrderedBulkOperation;\nmodule.exports = initializeOrderedBulkOp;\nmodule.exports.Bulk = OrderedBulkOperation;","map":null,"metadata":{},"sourceType":"script"}