{"ast":null,"code":"'use strict';\n\nvar buffer = require('buffer');\n\nvar Buffer = buffer.Buffer;\nvar SlowBuffer = buffer.SlowBuffer;\nvar MAX_LEN = buffer.kMaxLength || 2147483647;\n\nexports.alloc = function alloc(size, fill, encoding) {\n  if (typeof Buffer.alloc === 'function') {\n    return Buffer.alloc(size, fill, encoding);\n  }\n\n  if (typeof encoding === 'number') {\n    throw new TypeError('encoding must not be number');\n  }\n\n  if (typeof size !== 'number') {\n    throw new TypeError('size must be a number');\n  }\n\n  if (size > MAX_LEN) {\n    throw new RangeError('size is too large');\n  }\n\n  var enc = encoding;\n  var _fill = fill;\n\n  if (_fill === undefined) {\n    enc = undefined;\n    _fill = 0;\n  }\n\n  var buf = new Buffer(size);\n\n  if (typeof _fill === 'string') {\n    var fillBuf = new Buffer(_fill, enc);\n    var flen = fillBuf.length;\n    var i = -1;\n\n    while (++i < size) {\n      buf[i] = fillBuf[i % flen];\n    }\n  } else {\n    buf.fill(_fill);\n  }\n\n  return buf;\n};\n\nexports.allocUnsafe = function allocUnsafe(size) {\n  if (typeof Buffer.allocUnsafe === 'function') {\n    return Buffer.allocUnsafe(size);\n  }\n\n  if (typeof size !== 'number') {\n    throw new TypeError('size must be a number');\n  }\n\n  if (size > MAX_LEN) {\n    throw new RangeError('size is too large');\n  }\n\n  return new Buffer(size);\n};\n\nexports.from = function from(value, encodingOrOffset, length) {\n  if (typeof Buffer.from === 'function' && (!global.Uint8Array || Uint8Array.from !== Buffer.from)) {\n    return Buffer.from(value, encodingOrOffset, length);\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number');\n  }\n\n  if (typeof value === 'string') {\n    return new Buffer(value, encodingOrOffset);\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    var offset = encodingOrOffset;\n\n    if (arguments.length === 1) {\n      return new Buffer(value);\n    }\n\n    if (typeof offset === 'undefined') {\n      offset = 0;\n    }\n\n    var len = length;\n\n    if (typeof len === 'undefined') {\n      len = value.byteLength - offset;\n    }\n\n    if (offset >= value.byteLength) {\n      throw new RangeError('\\'offset\\' is out of bounds');\n    }\n\n    if (len > value.byteLength - offset) {\n      throw new RangeError('\\'length\\' is out of bounds');\n    }\n\n    return new Buffer(value.slice(offset, offset + len));\n  }\n\n  if (Buffer.isBuffer(value)) {\n    var out = new Buffer(value.length);\n    value.copy(out, 0, 0, value.length);\n    return out;\n  }\n\n  if (value) {\n    if (Array.isArray(value) || typeof ArrayBuffer !== 'undefined' && value.buffer instanceof ArrayBuffer || 'length' in value) {\n      return new Buffer(value);\n    }\n\n    if (value.type === 'Buffer' && Array.isArray(value.data)) {\n      return new Buffer(value.data);\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ' + 'ArrayBuffer, Array, or array-like object.');\n};\n\nexports.allocUnsafeSlow = function allocUnsafeSlow(size) {\n  if (typeof Buffer.allocUnsafeSlow === 'function') {\n    return Buffer.allocUnsafeSlow(size);\n  }\n\n  if (typeof size !== 'number') {\n    throw new TypeError('size must be a number');\n  }\n\n  if (size >= MAX_LEN) {\n    throw new RangeError('size is too large');\n  }\n\n  return new SlowBuffer(size);\n};","map":null,"metadata":{},"sourceType":"script"}