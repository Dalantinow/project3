{"ast":null,"code":"\"use strict\";\n\nvar inherits = require('util').inherits,\n    MongoError = require('mongodb-core').MongoError,\n    Readable = require('stream').Readable || require('readable-stream').Readable,\n    Define = require('./metadata'),\n    CoreCursor = require('./cursor');\n/**\n * @fileOverview The **AggregationCursor** class is an internal class that embodies an aggregation cursor on MongoDB\n * allowing for iteration over the results returned from the underlying query. It supports\n * one by one document iteration, conversion to an array or can be iterated as a Node 0.10.X\n * or higher stream\n *\n * **AGGREGATIONCURSOR Cannot directly be instantiated**\n * @example\n * var MongoClient = require('mongodb').MongoClient,\n *   test = require('assert');\n * // Connection url\n * var url = 'mongodb://localhost:27017/test';\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, db) {\n *   // Create a collection we want to drop later\n *   var col = db.collection('createIndexExample1');\n *   // Insert a bunch of documents\n *   col.insert([{a:1, b:1}\n *     , {a:2, b:2}, {a:3, b:3}\n *     , {a:4, b:4}], {w:1}, function(err, result) {\n *     test.equal(null, err);\n *     // Show that duplicate records got dropped\n *     col.aggregation({}, {cursor: {}}).toArray(function(err, items) {\n *       test.equal(null, err);\n *       test.equal(4, items.length);\n *       db.close();\n *     });\n *   });\n * });\n */\n\n/**\n * Namespace provided by the browser.\n * @external Readable\n */\n\n/**\n * Creates a new Aggregation Cursor instance (INTERNAL TYPE, do not instantiate directly)\n * @class AggregationCursor\n * @extends external:Readable\n * @fires AggregationCursor#data\n * @fires AggregationCursor#end\n * @fires AggregationCursor#close\n * @fires AggregationCursor#readable\n * @return {AggregationCursor} an AggregationCursor instance.\n */\n\n\nvar AggregationCursor = function (bson, ns, cmd, options, topology, topologyOptions) {\n  CoreCursor.apply(this, Array.prototype.slice.call(arguments, 0));\n  var state = AggregationCursor.INIT;\n  var streamOptions = {}; // MaxTimeMS\n\n  var maxTimeMS = null; // Get the promiseLibrary\n\n  var promiseLibrary = options.promiseLibrary; // No promise library selected fall back\n\n  if (!promiseLibrary) {\n    promiseLibrary = typeof global.Promise == 'function' ? global.Promise : require('es6-promise').Promise;\n  } // Set up\n\n\n  Readable.call(this, {\n    objectMode: true\n  }); // Internal state\n\n  this.s = {\n    // MaxTimeMS\n    maxTimeMS: maxTimeMS // State\n    ,\n    state: state // Stream options\n    ,\n    streamOptions: streamOptions // BSON\n    ,\n    bson: bson // Namespace\n    ,\n    ns: ns // Command\n    ,\n    cmd: cmd // Options\n    ,\n    options: options // Topology\n    ,\n    topology: topology // Topology Options\n    ,\n    topologyOptions: topologyOptions // Promise library\n    ,\n    promiseLibrary: promiseLibrary\n  };\n};\n/**\n * AggregationCursor stream data event, fired for each document in the cursor.\n *\n * @event AggregationCursor#data\n * @type {object}\n */\n\n/**\n * AggregationCursor stream end event\n *\n * @event AggregationCursor#end\n * @type {null}\n */\n\n/**\n * AggregationCursor stream close event\n *\n * @event AggregationCursor#close\n * @type {null}\n */\n\n/**\n * AggregationCursor stream readable event\n *\n * @event AggregationCursor#readable\n * @type {null}\n */\n// Inherit from Readable\n\n\ninherits(AggregationCursor, Readable); // Extend the Cursor\n\nfor (var name in CoreCursor.prototype) {\n  AggregationCursor.prototype[name] = CoreCursor.prototype[name];\n}\n\nvar define = AggregationCursor.define = new Define('AggregationCursor', AggregationCursor, true);\n/**\n * Set the batch size for the cursor.\n * @method\n * @param {number} value The batchSize for the cursor.\n * @throws {MongoError}\n * @return {AggregationCursor}\n */\n\nAggregationCursor.prototype.batchSize = function (value) {\n  if (this.s.state == AggregationCursor.CLOSED || this.isDead()) throw MongoError.create({\n    message: \"Cursor is closed\",\n    driver: true\n  });\n  if (typeof value != 'number') throw MongoError.create({\n    message: \"batchSize requires an integer\",\n    driver: true\n  });\n  if (this.s.cmd.cursor) this.s.cmd.cursor.batchSize = value;\n  this.setCursorBatchSize(value);\n  return this;\n};\n\ndefine.classMethod('batchSize', {\n  callback: false,\n  promise: false,\n  returns: [AggregationCursor]\n});\n/**\n * Add a geoNear stage to the aggregation pipeline\n * @method\n * @param {object} document The geoNear stage document.\n * @return {AggregationCursor}\n */\n\nAggregationCursor.prototype.geoNear = function (document) {\n  this.s.cmd.pipeline.push({\n    $geoNear: document\n  });\n  return this;\n};\n\ndefine.classMethod('geoNear', {\n  callback: false,\n  promise: false,\n  returns: [AggregationCursor]\n});\n/**\n * Add a group stage to the aggregation pipeline\n * @method\n * @param {object} document The group stage document.\n * @return {AggregationCursor}\n */\n\nAggregationCursor.prototype.group = function (document) {\n  this.s.cmd.pipeline.push({\n    $group: document\n  });\n  return this;\n};\n\ndefine.classMethod('group', {\n  callback: false,\n  promise: false,\n  returns: [AggregationCursor]\n});\n/**\n * Add a limit stage to the aggregation pipeline\n * @method\n * @param {number} value The state limit value.\n * @return {AggregationCursor}\n */\n\nAggregationCursor.prototype.limit = function (value) {\n  this.s.cmd.pipeline.push({\n    $limit: value\n  });\n  return this;\n};\n\ndefine.classMethod('limit', {\n  callback: false,\n  promise: false,\n  returns: [AggregationCursor]\n});\n/**\n * Add a match stage to the aggregation pipeline\n * @method\n * @param {object} document The match stage document.\n * @return {AggregationCursor}\n */\n\nAggregationCursor.prototype.match = function (document) {\n  this.s.cmd.pipeline.push({\n    $match: document\n  });\n  return this;\n};\n\ndefine.classMethod('match', {\n  callback: false,\n  promise: false,\n  returns: [AggregationCursor]\n});\n/**\n * Add a maxTimeMS stage to the aggregation pipeline\n * @method\n * @param {number} value The state maxTimeMS value.\n * @return {AggregationCursor}\n */\n\nAggregationCursor.prototype.maxTimeMS = function (value) {\n  if (this.s.topology.lastIsMaster().minWireVersion > 2) {\n    this.s.cmd.maxTimeMS = value;\n  }\n\n  return this;\n};\n\ndefine.classMethod('maxTimeMS', {\n  callback: false,\n  promise: false,\n  returns: [AggregationCursor]\n});\n/**\n * Add a out stage to the aggregation pipeline\n * @method\n * @param {number} destination The destination name.\n * @return {AggregationCursor}\n */\n\nAggregationCursor.prototype.out = function (destination) {\n  this.s.cmd.pipeline.push({\n    $out: destination\n  });\n  return this;\n};\n\ndefine.classMethod('out', {\n  callback: false,\n  promise: false,\n  returns: [AggregationCursor]\n});\n/**\n * Add a project stage to the aggregation pipeline\n * @method\n * @param {object} document The project stage document.\n * @return {AggregationCursor}\n */\n\nAggregationCursor.prototype.project = function (document) {\n  this.s.cmd.pipeline.push({\n    $project: document\n  });\n  return this;\n};\n\ndefine.classMethod('project', {\n  callback: false,\n  promise: false,\n  returns: [AggregationCursor]\n});\n/**\n * Add a lookup stage to the aggregation pipeline\n * @method\n * @param {object} document The lookup stage document.\n * @return {AggregationCursor}\n */\n\nAggregationCursor.prototype.lookup = function (document) {\n  this.s.cmd.pipeline.push({\n    $lookup: document\n  });\n  return this;\n};\n\ndefine.classMethod('lookup', {\n  callback: false,\n  promise: false,\n  returns: [AggregationCursor]\n});\n/**\n * Add a redact stage to the aggregation pipeline\n * @method\n * @param {object} document The redact stage document.\n * @return {AggregationCursor}\n */\n\nAggregationCursor.prototype.redact = function (document) {\n  this.s.cmd.pipeline.push({\n    $redact: document\n  });\n  return this;\n};\n\ndefine.classMethod('redact', {\n  callback: false,\n  promise: false,\n  returns: [AggregationCursor]\n});\n/**\n * Add a skip stage to the aggregation pipeline\n * @method\n * @param {number} value The state skip value.\n * @return {AggregationCursor}\n */\n\nAggregationCursor.prototype.skip = function (value) {\n  this.s.cmd.pipeline.push({\n    $skip: value\n  });\n  return this;\n};\n\ndefine.classMethod('skip', {\n  callback: false,\n  promise: false,\n  returns: [AggregationCursor]\n});\n/**\n * Add a sort stage to the aggregation pipeline\n * @method\n * @param {object} document The sort stage document.\n * @return {AggregationCursor}\n */\n\nAggregationCursor.prototype.sort = function (document) {\n  this.s.cmd.pipeline.push({\n    $sort: document\n  });\n  return this;\n};\n\ndefine.classMethod('sort', {\n  callback: false,\n  promise: false,\n  returns: [AggregationCursor]\n});\n/**\n * Add a unwind stage to the aggregation pipeline\n * @method\n * @param {number} field The unwind field name.\n * @return {AggregationCursor}\n */\n\nAggregationCursor.prototype.unwind = function (field) {\n  this.s.cmd.pipeline.push({\n    $unwind: field\n  });\n  return this;\n};\n\ndefine.classMethod('unwind', {\n  callback: false,\n  promise: false,\n  returns: [AggregationCursor]\n});\nAggregationCursor.prototype.get = AggregationCursor.prototype.toArray; // Inherited methods\n\ndefine.classMethod('toArray', {\n  callback: true,\n  promise: true\n});\ndefine.classMethod('each', {\n  callback: true,\n  promise: false\n});\ndefine.classMethod('forEach', {\n  callback: true,\n  promise: false\n});\ndefine.classMethod('hasNext', {\n  callback: true,\n  promise: true\n});\ndefine.classMethod('next', {\n  callback: true,\n  promise: true\n});\ndefine.classMethod('close', {\n  callback: true,\n  promise: true\n});\ndefine.classMethod('isClosed', {\n  callback: false,\n  promise: false,\n  returns: [Boolean]\n});\ndefine.classMethod('rewind', {\n  callback: false,\n  promise: false\n});\ndefine.classMethod('bufferedCount', {\n  callback: false,\n  promise: false,\n  returns: [Number]\n});\ndefine.classMethod('readBufferedDocuments', {\n  callback: false,\n  promise: false,\n  returns: [Array]\n});\n/**\n * Get the next available document from the cursor, returns null if no more documents are available.\n * @function AggregationCursor.prototype.next\n * @param {AggregationCursor~resultCallback} [callback] The result callback.\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * Check if there is any document still available in the cursor\n * @function AggregationCursor.prototype.hasNext\n * @param {AggregationCursor~resultCallback} [callback] The result callback.\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * The callback format for results\n * @callback AggregationCursor~toArrayResultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {object[]} documents All the documents the satisfy the cursor.\n */\n\n/**\n * Returns an array of documents. The caller is responsible for making sure that there\n * is enough memory to store the results. Note that the array only contain partial\n * results when this cursor had been previously accessed. In that case,\n * cursor.rewind() can be used to reset the cursor.\n * @method AggregationCursor.prototype.toArray\n * @param {AggregationCursor~toArrayResultCallback} [callback] The result callback.\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * The callback format for results\n * @callback AggregationCursor~resultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {(object|null)} result The result object if the command was executed successfully.\n */\n\n/**\n * Iterates over all the documents for this cursor. As with **{cursor.toArray}**,\n * not all of the elements will be iterated if this cursor had been previously accessed.\n * In that case, **{cursor.rewind}** can be used to reset the cursor. However, unlike\n * **{cursor.toArray}**, the cursor will only hold a maximum of batch size elements\n * at any given time if batch size is specified. Otherwise, the caller is responsible\n * for making sure that the entire result can fit the memory.\n * @method AggregationCursor.prototype.each\n * @param {AggregationCursor~resultCallback} callback The result callback.\n * @throws {MongoError}\n * @return {null}\n */\n\n/**\n * Close the cursor, sending a AggregationCursor command and emitting close.\n * @method AggregationCursor.prototype.close\n * @param {AggregationCursor~resultCallback} [callback] The result callback.\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * Is the cursor closed\n * @method AggregationCursor.prototype.isClosed\n * @return {boolean}\n */\n\n/**\n * Execute the explain for the cursor\n * @method AggregationCursor.prototype.explain\n * @param {AggregationCursor~resultCallback} [callback] The result callback.\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * Clone the cursor\n * @function AggregationCursor.prototype.clone\n * @return {AggregationCursor}\n */\n\n/**\n * Resets the cursor\n * @function AggregationCursor.prototype.rewind\n * @return {AggregationCursor}\n */\n\n/**\n * The callback format for the forEach iterator method\n * @callback AggregationCursor~iteratorCallback\n * @param {Object} doc An emitted document for the iterator\n */\n\n/**\n * The callback error format for the forEach iterator method\n * @callback AggregationCursor~endCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n */\n\n/*\n * Iterates over all the documents for this cursor using the iterator, callback pattern.\n * @method AggregationCursor.prototype.forEach\n * @param {AggregationCursor~iteratorCallback} iterator The iteration callback.\n * @param {AggregationCursor~endCallback} callback The end callback.\n * @throws {MongoError}\n * @return {null}\n */\n\nAggregationCursor.INIT = 0;\nAggregationCursor.OPEN = 1;\nAggregationCursor.CLOSED = 2;\nmodule.exports = AggregationCursor;","map":null,"metadata":{},"sourceType":"script"}